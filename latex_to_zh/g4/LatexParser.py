# Generated from g4/Latex.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,167,1059,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,0,1,
        0,3,0,133,8,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,143,8,2,1,3,1,
        3,1,3,1,3,3,3,149,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,
        6,1,6,3,6,163,8,6,1,7,1,7,1,7,5,7,168,8,7,10,7,12,7,171,9,7,1,8,
        1,8,1,8,1,8,5,8,177,8,8,10,8,12,8,180,9,8,1,8,3,8,183,8,8,1,8,1,
        8,1,8,1,8,1,8,1,8,3,8,191,8,8,1,8,1,8,1,8,1,8,3,8,197,8,8,1,9,1,
        9,1,9,1,9,5,9,203,8,9,10,9,12,9,206,9,9,1,9,3,9,209,8,9,1,9,1,9,
        1,10,1,10,1,10,1,10,5,10,217,8,10,10,10,12,10,220,9,10,1,10,3,10,
        223,8,10,1,10,1,10,1,11,1,11,1,11,5,11,230,8,11,10,11,12,11,233,
        9,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,241,8,12,10,12,12,12,244,
        9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,
        283,8,13,1,14,1,14,1,14,1,14,1,14,5,14,290,8,14,10,14,12,14,293,
        9,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
        5,17,307,8,17,10,17,12,17,310,9,17,1,18,1,18,1,18,1,18,1,18,1,18,
        5,18,318,8,18,10,18,12,18,321,9,18,1,19,1,19,1,19,1,19,1,19,1,19,
        5,19,329,8,19,10,19,12,19,332,9,19,1,20,1,20,1,20,4,20,337,8,20,
        11,20,12,20,338,3,20,341,8,20,1,21,1,21,1,21,1,21,5,21,347,8,21,
        10,21,12,21,350,9,21,3,21,352,8,21,1,22,1,22,5,22,356,8,22,10,22,
        12,22,359,9,22,1,23,1,23,5,23,363,8,23,10,23,12,23,366,9,23,1,24,
        1,24,1,24,3,24,371,8,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,379,8,
        25,1,26,1,26,1,26,1,26,3,26,385,8,26,1,26,1,26,1,27,1,27,1,27,1,
        27,3,27,393,8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,3,28,407,8,28,1,28,3,28,410,8,28,5,28,412,8,28,10,28,
        12,28,415,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        3,29,427,8,29,1,29,3,29,430,8,29,5,29,432,8,29,10,29,12,29,435,9,
        29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,3,31,452,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,3,32,464,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,3,33,578,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,596,8,34,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,3,35,646,8,35,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,3,36,680,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,714,8,
        37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,3,39,724,8,39,1,39,3,
        39,727,8,39,1,40,1,40,1,40,3,40,732,8,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,3,40,742,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,3,41,754,8,41,1,42,1,42,1,42,1,42,1,42,1,43,4,43,
        762,8,43,11,43,12,43,763,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,793,8,46,1,47,1,47,1,48,1,48,
        1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,809,8,51,
        1,52,1,52,1,52,1,52,1,52,1,52,3,52,817,8,52,1,53,1,53,3,53,821,8,
        53,1,53,3,53,824,8,53,1,53,3,53,827,8,53,1,53,3,53,830,8,53,3,53,
        832,8,53,1,53,3,53,835,8,53,1,53,1,53,1,53,3,53,840,8,53,1,53,1,
        53,1,53,3,53,845,8,53,1,53,1,53,1,53,3,53,850,8,53,1,53,1,53,1,53,
        3,53,855,8,53,1,53,1,53,3,53,859,8,53,1,53,3,53,862,8,53,1,53,3,
        53,865,8,53,1,53,3,53,868,8,53,3,53,870,8,53,1,53,3,53,873,8,53,
        1,53,1,53,1,53,3,53,878,8,53,1,53,1,53,1,53,3,53,883,8,53,1,53,1,
        53,1,53,3,53,888,8,53,1,53,1,53,1,53,3,53,893,8,53,1,53,1,53,3,53,
        897,8,53,1,53,3,53,900,8,53,1,53,1,53,1,53,1,53,3,53,906,8,53,1,
        53,1,53,3,53,910,8,53,1,53,1,53,3,53,914,8,53,1,53,1,53,1,53,1,53,
        3,53,920,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,945,8,53,1,53,3,53,948,8,53,1,53,1,53,1,53,3,53,953,8,53,1,
        53,1,53,1,53,1,53,1,53,3,53,960,8,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,3,53,973,8,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,3,53,983,8,53,3,53,985,8,53,1,54,1,54,1,54,1,54,
        1,54,3,54,992,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        1002,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1013,
        8,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,
        1026,8,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,3,61,1035,8,61,1,61,
        1,61,3,61,1039,8,61,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1047,8,62,
        1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,0,6,24,34,
        36,38,56,58,65,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,0,18,1,0,1,4,1,0,152,160,1,0,139,140,1,0,
        153,154,2,0,8,9,118,118,4,0,10,11,110,113,117,117,138,138,5,0,10,
        11,110,111,113,113,117,117,138,138,2,0,8,9,12,12,1,0,8,9,1,0,143,
        145,3,0,49,72,86,87,90,90,2,0,84,85,88,89,6,0,73,78,81,82,91,91,
        94,95,97,100,104,108,4,0,79,80,92,93,96,96,101,103,2,0,13,13,23,
        23,2,0,14,14,24,24,1,0,47,48,2,0,145,145,166,166,1176,0,132,1,0,
        0,0,2,134,1,0,0,0,4,136,1,0,0,0,6,148,1,0,0,0,8,152,1,0,0,0,10,156,
        1,0,0,0,12,162,1,0,0,0,14,164,1,0,0,0,16,172,1,0,0,0,18,198,1,0,
        0,0,20,212,1,0,0,0,22,226,1,0,0,0,24,234,1,0,0,0,26,282,1,0,0,0,
        28,284,1,0,0,0,30,294,1,0,0,0,32,298,1,0,0,0,34,300,1,0,0,0,36,311,
        1,0,0,0,38,322,1,0,0,0,40,340,1,0,0,0,42,351,1,0,0,0,44,353,1,0,
        0,0,46,360,1,0,0,0,48,370,1,0,0,0,50,372,1,0,0,0,52,380,1,0,0,0,
        54,388,1,0,0,0,56,396,1,0,0,0,58,416,1,0,0,0,60,436,1,0,0,0,62,451,
        1,0,0,0,64,463,1,0,0,0,66,577,1,0,0,0,68,595,1,0,0,0,70,645,1,0,
        0,0,72,679,1,0,0,0,74,713,1,0,0,0,76,715,1,0,0,0,78,723,1,0,0,0,
        80,731,1,0,0,0,82,753,1,0,0,0,84,755,1,0,0,0,86,761,1,0,0,0,88,765,
        1,0,0,0,90,770,1,0,0,0,92,792,1,0,0,0,94,794,1,0,0,0,96,796,1,0,
        0,0,98,798,1,0,0,0,100,800,1,0,0,0,102,808,1,0,0,0,104,816,1,0,0,
        0,106,984,1,0,0,0,108,991,1,0,0,0,110,1001,1,0,0,0,112,1003,1,0,
        0,0,114,1016,1,0,0,0,116,1018,1,0,0,0,118,1025,1,0,0,0,120,1027,
        1,0,0,0,122,1029,1,0,0,0,124,1040,1,0,0,0,126,1048,1,0,0,0,128,1053,
        1,0,0,0,130,133,3,24,12,0,131,133,3,26,13,0,132,130,1,0,0,0,132,
        131,1,0,0,0,133,1,1,0,0,0,134,135,7,0,0,0,135,3,1,0,0,0,136,137,
        5,145,0,0,137,142,5,136,0,0,138,143,5,150,0,0,139,140,5,17,0,0,140,
        141,5,150,0,0,141,143,5,18,0,0,142,138,1,0,0,0,142,139,1,0,0,0,143,
        5,1,0,0,0,144,149,3,32,16,0,145,149,3,66,33,0,146,149,5,8,0,0,147,
        149,5,9,0,0,148,144,1,0,0,0,148,145,1,0,0,0,148,146,1,0,0,0,148,
        147,1,0,0,0,149,150,1,0,0,0,150,151,3,4,2,0,151,7,1,0,0,0,152,153,
        3,4,2,0,153,154,5,149,0,0,154,155,3,4,2,0,155,9,1,0,0,0,156,157,
        3,4,2,0,157,158,3,6,3,0,158,11,1,0,0,0,159,163,3,10,5,0,160,163,
        3,6,3,0,161,163,3,8,4,0,162,159,1,0,0,0,162,160,1,0,0,0,162,161,
        1,0,0,0,163,13,1,0,0,0,164,169,3,12,6,0,165,166,5,140,0,0,166,168,
        3,12,6,0,167,165,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,
        1,0,0,0,170,15,1,0,0,0,171,169,1,0,0,0,172,173,5,128,0,0,173,178,
        3,22,11,0,174,175,5,135,0,0,175,177,3,22,11,0,176,174,1,0,0,0,177,
        180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,182,1,0,0,0,180,
        178,1,0,0,0,181,183,5,135,0,0,182,181,1,0,0,0,182,183,1,0,0,0,183,
        184,1,0,0,0,184,196,5,129,0,0,185,190,5,148,0,0,186,187,5,23,0,0,
        187,188,3,14,7,0,188,189,5,24,0,0,189,191,1,0,0,0,190,186,1,0,0,
        0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,5,17,0,0,193,194,3,14,
        7,0,194,195,5,18,0,0,195,197,1,0,0,0,196,185,1,0,0,0,196,197,1,0,
        0,0,197,17,1,0,0,0,198,199,5,130,0,0,199,204,3,22,11,0,200,201,5,
        135,0,0,201,203,3,22,11,0,202,200,1,0,0,0,203,206,1,0,0,0,204,202,
        1,0,0,0,204,205,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,207,209,
        5,135,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,
        5,131,0,0,211,19,1,0,0,0,212,213,5,132,0,0,213,218,3,22,11,0,214,
        215,5,135,0,0,215,217,3,22,11,0,216,214,1,0,0,0,217,220,1,0,0,0,
        218,216,1,0,0,0,218,219,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,
        221,223,5,135,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,
        0,224,225,5,133,0,0,225,21,1,0,0,0,226,231,3,24,12,0,227,228,5,134,
        0,0,228,230,3,24,12,0,229,227,1,0,0,0,230,233,1,0,0,0,231,229,1,
        0,0,0,231,232,1,0,0,0,232,23,1,0,0,0,233,231,1,0,0,0,234,235,6,12,
        -1,0,235,236,3,32,16,0,236,242,1,0,0,0,237,238,10,2,0,0,238,239,
        7,1,0,0,239,241,3,24,12,3,240,237,1,0,0,0,241,244,1,0,0,0,242,240,
        1,0,0,0,242,243,1,0,0,0,243,25,1,0,0,0,244,242,1,0,0,0,245,283,3,
        28,14,0,246,247,5,23,0,0,247,248,3,28,14,0,248,249,5,24,0,0,249,
        283,1,0,0,0,250,251,5,17,0,0,251,252,3,28,14,0,252,253,5,18,0,0,
        253,283,1,0,0,0,254,255,5,19,0,0,255,256,3,28,14,0,256,257,5,20,
        0,0,257,283,1,0,0,0,258,259,5,40,0,0,259,260,5,23,0,0,260,261,3,
        28,14,0,261,262,5,41,0,0,262,263,5,24,0,0,263,283,1,0,0,0,264,265,
        5,40,0,0,265,266,5,19,0,0,266,267,3,28,14,0,267,268,5,41,0,0,268,
        269,5,20,0,0,269,283,1,0,0,0,270,271,5,42,0,0,271,272,5,23,0,0,272,
        273,3,28,14,0,273,274,5,43,0,0,274,275,5,24,0,0,275,283,1,0,0,0,
        276,277,5,42,0,0,277,278,5,19,0,0,278,279,3,28,14,0,279,280,5,43,
        0,0,280,281,5,20,0,0,281,283,1,0,0,0,282,245,1,0,0,0,282,246,1,0,
        0,0,282,250,1,0,0,0,282,254,1,0,0,0,282,258,1,0,0,0,282,264,1,0,
        0,0,282,270,1,0,0,0,282,276,1,0,0,0,283,27,1,0,0,0,284,285,3,24,
        12,0,285,286,7,2,0,0,286,291,3,24,12,0,287,288,7,2,0,0,288,290,3,
        24,12,0,289,287,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,
        1,0,0,0,292,29,1,0,0,0,293,291,1,0,0,0,294,295,3,32,16,0,295,296,
        7,3,0,0,296,297,3,32,16,0,297,31,1,0,0,0,298,299,3,34,17,0,299,33,
        1,0,0,0,300,301,6,17,-1,0,301,302,3,36,18,0,302,308,1,0,0,0,303,
        304,10,2,0,0,304,305,7,4,0,0,305,307,3,34,17,3,306,303,1,0,0,0,307,
        310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,35,1,0,0,0,310,308,
        1,0,0,0,311,312,6,18,-1,0,312,313,3,40,20,0,313,319,1,0,0,0,314,
        315,10,2,0,0,315,316,7,5,0,0,316,318,3,36,18,3,317,314,1,0,0,0,318,
        321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,37,1,0,0,0,321,319,
        1,0,0,0,322,323,6,19,-1,0,323,324,3,42,21,0,324,330,1,0,0,0,325,
        326,10,2,0,0,326,327,7,6,0,0,327,329,3,38,19,3,328,325,1,0,0,0,329,
        332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,39,1,0,0,0,332,330,
        1,0,0,0,333,334,7,7,0,0,334,341,3,40,20,0,335,337,3,44,22,0,336,
        335,1,0,0,0,337,338,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
        341,1,0,0,0,340,333,1,0,0,0,340,336,1,0,0,0,341,41,1,0,0,0,342,343,
        7,8,0,0,343,352,3,42,21,0,344,348,3,44,22,0,345,347,3,46,23,0,346,
        345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,
        352,1,0,0,0,350,348,1,0,0,0,351,342,1,0,0,0,351,344,1,0,0,0,352,
        43,1,0,0,0,353,357,3,56,28,0,354,356,3,48,24,0,355,354,1,0,0,0,356,
        359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,45,1,0,0,0,359,357,
        1,0,0,0,360,364,3,58,29,0,361,363,3,48,24,0,362,361,1,0,0,0,363,
        366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,47,1,0,0,0,366,364,
        1,0,0,0,367,371,5,161,0,0,368,371,3,50,25,0,369,371,3,2,1,0,370,
        367,1,0,0,0,370,368,1,0,0,0,370,369,1,0,0,0,371,49,1,0,0,0,372,378,
        5,27,0,0,373,379,3,54,27,0,374,379,3,52,26,0,375,376,3,54,27,0,376,
        377,3,52,26,0,377,379,1,0,0,0,378,373,1,0,0,0,378,374,1,0,0,0,378,
        375,1,0,0,0,379,51,1,0,0,0,380,381,5,136,0,0,381,384,5,17,0,0,382,
        385,3,32,16,0,383,385,3,30,15,0,384,382,1,0,0,0,384,383,1,0,0,0,
        385,386,1,0,0,0,386,387,5,18,0,0,387,53,1,0,0,0,388,389,5,137,0,
        0,389,392,5,17,0,0,390,393,3,32,16,0,391,393,3,30,15,0,392,390,1,
        0,0,0,392,391,1,0,0,0,393,394,1,0,0,0,394,395,5,18,0,0,395,55,1,
        0,0,0,396,397,6,28,-1,0,397,398,3,62,31,0,398,413,1,0,0,0,399,400,
        10,2,0,0,400,406,5,137,0,0,401,407,3,82,41,0,402,403,5,17,0,0,403,
        404,3,32,16,0,404,405,5,18,0,0,405,407,1,0,0,0,406,401,1,0,0,0,406,
        402,1,0,0,0,407,409,1,0,0,0,408,410,3,122,61,0,409,408,1,0,0,0,409,
        410,1,0,0,0,410,412,1,0,0,0,411,399,1,0,0,0,412,415,1,0,0,0,413,
        411,1,0,0,0,413,414,1,0,0,0,414,57,1,0,0,0,415,413,1,0,0,0,416,417,
        6,29,-1,0,417,418,3,64,32,0,418,433,1,0,0,0,419,420,10,2,0,0,420,
        426,5,137,0,0,421,427,3,82,41,0,422,423,5,17,0,0,423,424,3,32,16,
        0,424,425,5,18,0,0,425,427,1,0,0,0,426,421,1,0,0,0,426,422,1,0,0,
        0,427,429,1,0,0,0,428,430,3,122,61,0,429,428,1,0,0,0,429,430,1,0,
        0,0,430,432,1,0,0,0,431,419,1,0,0,0,432,435,1,0,0,0,433,431,1,0,
        0,0,433,434,1,0,0,0,434,59,1,0,0,0,435,433,1,0,0,0,436,437,5,109,
        0,0,437,438,5,146,0,0,438,61,1,0,0,0,439,452,3,66,33,0,440,452,3,
        68,34,0,441,452,3,70,35,0,442,452,3,72,36,0,443,452,3,74,37,0,444,
        452,3,106,53,0,445,452,3,82,41,0,446,452,3,90,45,0,447,452,3,92,
        46,0,448,452,3,16,8,0,449,452,3,18,9,0,450,452,3,20,10,0,451,439,
        1,0,0,0,451,440,1,0,0,0,451,441,1,0,0,0,451,442,1,0,0,0,451,443,
        1,0,0,0,451,444,1,0,0,0,451,445,1,0,0,0,451,446,1,0,0,0,451,447,
        1,0,0,0,451,448,1,0,0,0,451,449,1,0,0,0,451,450,1,0,0,0,452,63,1,
        0,0,0,453,464,3,66,33,0,454,464,3,68,34,0,455,464,3,70,35,0,456,
        464,3,72,36,0,457,464,3,74,37,0,458,464,3,82,41,0,459,464,3,90,45,
        0,460,464,3,92,46,0,461,464,3,16,8,0,462,464,3,18,9,0,463,453,1,
        0,0,0,463,454,1,0,0,0,463,455,1,0,0,0,463,456,1,0,0,0,463,457,1,
        0,0,0,463,458,1,0,0,0,463,459,1,0,0,0,463,460,1,0,0,0,463,461,1,
        0,0,0,463,462,1,0,0,0,464,65,1,0,0,0,465,466,5,13,0,0,466,467,3,
        32,16,0,467,468,5,14,0,0,468,578,1,0,0,0,469,470,5,15,0,0,470,471,
        3,32,16,0,471,472,5,16,0,0,472,578,1,0,0,0,473,474,5,17,0,0,474,
        475,3,32,16,0,475,476,5,18,0,0,476,578,1,0,0,0,477,478,5,19,0,0,
        478,479,3,32,16,0,479,480,5,20,0,0,480,578,1,0,0,0,481,482,5,21,
        0,0,482,483,3,32,16,0,483,484,5,22,0,0,484,578,1,0,0,0,485,486,5,
        23,0,0,486,487,3,32,16,0,487,488,5,24,0,0,488,578,1,0,0,0,489,490,
        5,25,0,0,490,491,3,32,16,0,491,492,5,26,0,0,492,578,1,0,0,0,493,
        494,5,40,0,0,494,495,5,13,0,0,495,496,3,32,16,0,496,497,5,41,0,0,
        497,498,5,14,0,0,498,578,1,0,0,0,499,500,5,40,0,0,500,501,5,15,0,
        0,501,502,3,32,16,0,502,503,5,41,0,0,503,504,5,16,0,0,504,578,1,
        0,0,0,505,506,5,40,0,0,506,507,5,17,0,0,507,508,3,32,16,0,508,509,
        5,41,0,0,509,510,5,18,0,0,510,578,1,0,0,0,511,512,5,40,0,0,512,513,
        5,19,0,0,513,514,3,32,16,0,514,515,5,41,0,0,515,516,5,20,0,0,516,
        578,1,0,0,0,517,518,5,40,0,0,518,519,5,21,0,0,519,520,3,32,16,0,
        520,521,5,41,0,0,521,522,5,22,0,0,522,578,1,0,0,0,523,524,5,40,0,
        0,524,525,5,23,0,0,525,526,3,32,16,0,526,527,5,41,0,0,527,528,5,
        24,0,0,528,578,1,0,0,0,529,530,5,40,0,0,530,531,5,25,0,0,531,532,
        3,32,16,0,532,533,5,41,0,0,533,534,5,26,0,0,534,578,1,0,0,0,535,
        536,5,42,0,0,536,537,5,13,0,0,537,538,3,32,16,0,538,539,5,43,0,0,
        539,540,5,14,0,0,540,578,1,0,0,0,541,542,5,42,0,0,542,543,5,15,0,
        0,543,544,3,32,16,0,544,545,5,43,0,0,545,546,5,16,0,0,546,578,1,
        0,0,0,547,548,5,42,0,0,548,549,5,17,0,0,549,550,3,32,16,0,550,551,
        5,43,0,0,551,552,5,18,0,0,552,578,1,0,0,0,553,554,5,42,0,0,554,555,
        5,19,0,0,555,556,3,32,16,0,556,557,5,43,0,0,557,558,5,20,0,0,558,
        578,1,0,0,0,559,560,5,42,0,0,560,561,5,21,0,0,561,562,3,32,16,0,
        562,563,5,43,0,0,563,564,5,22,0,0,564,578,1,0,0,0,565,566,5,42,0,
        0,566,567,5,23,0,0,567,568,3,32,16,0,568,569,5,43,0,0,569,570,5,
        24,0,0,570,578,1,0,0,0,571,572,5,42,0,0,572,573,5,25,0,0,573,574,
        3,32,16,0,574,575,5,43,0,0,575,576,5,26,0,0,576,578,1,0,0,0,577,
        465,1,0,0,0,577,469,1,0,0,0,577,473,1,0,0,0,577,477,1,0,0,0,577,
        481,1,0,0,0,577,485,1,0,0,0,577,489,1,0,0,0,577,493,1,0,0,0,577,
        499,1,0,0,0,577,505,1,0,0,0,577,511,1,0,0,0,577,517,1,0,0,0,577,
        523,1,0,0,0,577,529,1,0,0,0,577,535,1,0,0,0,577,541,1,0,0,0,577,
        547,1,0,0,0,577,553,1,0,0,0,577,559,1,0,0,0,577,565,1,0,0,0,577,
        571,1,0,0,0,578,67,1,0,0,0,579,580,5,31,0,0,580,581,3,32,16,0,581,
        582,5,31,0,0,582,596,1,0,0,0,583,584,5,40,0,0,584,585,5,31,0,0,585,
        586,3,32,16,0,586,587,5,41,0,0,587,588,5,31,0,0,588,596,1,0,0,0,
        589,590,5,42,0,0,590,591,5,31,0,0,591,592,3,32,16,0,592,593,5,43,
        0,0,593,594,5,31,0,0,594,596,1,0,0,0,595,579,1,0,0,0,595,583,1,0,
        0,0,595,589,1,0,0,0,596,69,1,0,0,0,597,598,5,27,0,0,598,599,3,32,
        16,0,599,600,5,27,0,0,600,646,1,0,0,0,601,602,5,28,0,0,602,603,3,
        32,16,0,603,604,5,29,0,0,604,646,1,0,0,0,605,606,5,30,0,0,606,607,
        3,32,16,0,607,608,5,30,0,0,608,646,1,0,0,0,609,610,5,40,0,0,610,
        611,5,27,0,0,611,612,3,32,16,0,612,613,5,41,0,0,613,614,5,27,0,0,
        614,646,1,0,0,0,615,616,5,40,0,0,616,617,5,28,0,0,617,618,3,32,16,
        0,618,619,5,41,0,0,619,620,5,29,0,0,620,646,1,0,0,0,621,622,5,40,
        0,0,622,623,5,30,0,0,623,624,3,32,16,0,624,625,5,41,0,0,625,626,
        5,30,0,0,626,646,1,0,0,0,627,628,5,42,0,0,628,629,5,27,0,0,629,630,
        3,32,16,0,630,631,5,43,0,0,631,632,5,27,0,0,632,646,1,0,0,0,633,
        634,5,42,0,0,634,635,5,28,0,0,635,636,3,32,16,0,636,637,5,43,0,0,
        637,638,5,29,0,0,638,646,1,0,0,0,639,640,5,42,0,0,640,641,5,30,0,
        0,641,642,3,32,16,0,642,643,5,43,0,0,643,644,5,30,0,0,644,646,1,
        0,0,0,645,597,1,0,0,0,645,601,1,0,0,0,645,605,1,0,0,0,645,609,1,
        0,0,0,645,615,1,0,0,0,645,621,1,0,0,0,645,627,1,0,0,0,645,633,1,
        0,0,0,645,639,1,0,0,0,646,71,1,0,0,0,647,648,5,32,0,0,648,649,3,
        32,16,0,649,650,5,33,0,0,650,680,1,0,0,0,651,652,5,34,0,0,652,653,
        3,32,16,0,653,654,5,35,0,0,654,680,1,0,0,0,655,656,5,40,0,0,656,
        657,5,32,0,0,657,658,3,32,16,0,658,659,5,41,0,0,659,660,5,33,0,0,
        660,680,1,0,0,0,661,662,5,40,0,0,662,663,5,34,0,0,663,664,3,32,16,
        0,664,665,5,41,0,0,665,666,5,35,0,0,666,680,1,0,0,0,667,668,5,42,
        0,0,668,669,5,32,0,0,669,670,3,32,16,0,670,671,5,43,0,0,671,672,
        5,33,0,0,672,680,1,0,0,0,673,674,5,42,0,0,674,675,5,34,0,0,675,676,
        3,32,16,0,676,677,5,43,0,0,677,678,5,35,0,0,678,680,1,0,0,0,679,
        647,1,0,0,0,679,651,1,0,0,0,679,655,1,0,0,0,679,661,1,0,0,0,679,
        667,1,0,0,0,679,673,1,0,0,0,680,73,1,0,0,0,681,682,5,36,0,0,682,
        683,3,32,16,0,683,684,5,37,0,0,684,714,1,0,0,0,685,686,5,38,0,0,
        686,687,3,32,16,0,687,688,5,39,0,0,688,714,1,0,0,0,689,690,5,40,
        0,0,690,691,5,36,0,0,691,692,3,32,16,0,692,693,5,41,0,0,693,694,
        5,37,0,0,694,714,1,0,0,0,695,696,5,40,0,0,696,697,5,38,0,0,697,698,
        3,32,16,0,698,699,5,41,0,0,699,700,5,39,0,0,700,714,1,0,0,0,701,
        702,5,42,0,0,702,703,5,36,0,0,703,704,3,32,16,0,704,705,5,43,0,0,
        705,706,5,37,0,0,706,714,1,0,0,0,707,708,5,42,0,0,708,709,5,38,0,
        0,709,710,3,32,16,0,710,711,5,43,0,0,711,712,5,39,0,0,712,714,1,
        0,0,0,713,681,1,0,0,0,713,685,1,0,0,0,713,689,1,0,0,0,713,695,1,
        0,0,0,713,701,1,0,0,0,713,707,1,0,0,0,714,75,1,0,0,0,715,716,5,167,
        0,0,716,717,5,17,0,0,717,718,3,32,16,0,718,719,5,18,0,0,719,77,1,
        0,0,0,720,724,5,145,0,0,721,724,5,166,0,0,722,724,3,76,38,0,723,
        720,1,0,0,0,723,721,1,0,0,0,723,722,1,0,0,0,724,726,1,0,0,0,725,
        727,3,122,61,0,726,725,1,0,0,0,726,727,1,0,0,0,727,79,1,0,0,0,728,
        732,5,145,0,0,729,732,5,166,0,0,730,732,3,76,38,0,731,728,1,0,0,
        0,731,729,1,0,0,0,731,730,1,0,0,0,732,741,1,0,0,0,733,734,3,124,
        62,0,734,735,3,122,61,0,735,742,1,0,0,0,736,737,3,122,61,0,737,738,
        3,124,62,0,738,742,1,0,0,0,739,742,3,122,61,0,740,742,3,124,62,0,
        741,733,1,0,0,0,741,736,1,0,0,0,741,739,1,0,0,0,741,740,1,0,0,0,
        741,742,1,0,0,0,742,81,1,0,0,0,743,754,3,80,40,0,744,754,5,163,0,
        0,745,754,5,150,0,0,746,754,5,162,0,0,747,754,5,151,0,0,748,754,
        5,142,0,0,749,754,3,84,42,0,750,754,5,164,0,0,751,754,3,88,44,0,
        752,754,3,60,30,0,753,743,1,0,0,0,753,744,1,0,0,0,753,745,1,0,0,
        0,753,746,1,0,0,0,753,747,1,0,0,0,753,748,1,0,0,0,753,749,1,0,0,
        0,753,750,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,83,1,0,0,0,
        755,756,5,120,0,0,756,757,5,17,0,0,757,758,3,86,43,0,758,759,5,18,
        0,0,759,85,1,0,0,0,760,762,7,9,0,0,761,760,1,0,0,0,762,763,1,0,0,
        0,763,761,1,0,0,0,763,764,1,0,0,0,764,87,1,0,0,0,765,766,5,119,0,
        0,766,767,5,17,0,0,767,768,5,147,0,0,768,769,5,18,0,0,769,89,1,0,
        0,0,770,771,5,114,0,0,771,772,5,17,0,0,772,773,3,32,16,0,773,774,
        5,18,0,0,774,775,5,17,0,0,775,776,3,32,16,0,776,777,5,18,0,0,777,
        91,1,0,0,0,778,779,5,17,0,0,779,780,3,32,16,0,780,781,5,116,0,0,
        781,782,3,32,16,0,782,783,5,18,0,0,783,793,1,0,0,0,784,785,5,115,
        0,0,785,786,5,17,0,0,786,787,3,32,16,0,787,788,5,18,0,0,788,789,
        5,17,0,0,789,790,3,32,16,0,790,791,5,18,0,0,791,793,1,0,0,0,792,
        778,1,0,0,0,792,784,1,0,0,0,793,93,1,0,0,0,794,795,7,10,0,0,795,
        95,1,0,0,0,796,797,7,11,0,0,797,97,1,0,0,0,798,799,7,12,0,0,799,
        99,1,0,0,0,800,801,7,13,0,0,801,101,1,0,0,0,802,809,3,94,47,0,803,
        804,5,121,0,0,804,805,5,17,0,0,805,806,3,98,49,0,806,807,5,18,0,
        0,807,809,1,0,0,0,808,802,1,0,0,0,808,803,1,0,0,0,809,103,1,0,0,
        0,810,817,3,96,48,0,811,812,5,121,0,0,812,813,5,17,0,0,813,814,3,
        100,50,0,814,815,5,18,0,0,815,817,1,0,0,0,816,810,1,0,0,0,816,811,
        1,0,0,0,817,105,1,0,0,0,818,831,3,102,51,0,819,821,3,122,61,0,820,
        819,1,0,0,0,820,821,1,0,0,0,821,823,1,0,0,0,822,824,3,124,62,0,823,
        822,1,0,0,0,823,824,1,0,0,0,824,832,1,0,0,0,825,827,3,124,62,0,826,
        825,1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,830,3,122,61,0,829,
        828,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,820,1,0,0,0,831,
        826,1,0,0,0,832,854,1,0,0,0,833,835,5,40,0,0,834,833,1,0,0,0,834,
        835,1,0,0,0,835,836,1,0,0,0,836,837,5,13,0,0,837,839,3,114,57,0,
        838,840,5,41,0,0,839,838,1,0,0,0,839,840,1,0,0,0,840,841,1,0,0,0,
        841,842,5,14,0,0,842,855,1,0,0,0,843,845,5,42,0,0,844,843,1,0,0,
        0,844,845,1,0,0,0,845,846,1,0,0,0,846,847,5,13,0,0,847,849,3,114,
        57,0,848,850,5,43,0,0,849,848,1,0,0,0,849,850,1,0,0,0,850,851,1,
        0,0,0,851,852,5,14,0,0,852,855,1,0,0,0,853,855,3,116,58,0,854,834,
        1,0,0,0,854,844,1,0,0,0,854,853,1,0,0,0,855,985,1,0,0,0,856,869,
        3,104,52,0,857,859,3,122,61,0,858,857,1,0,0,0,858,859,1,0,0,0,859,
        861,1,0,0,0,860,862,3,124,62,0,861,860,1,0,0,0,861,862,1,0,0,0,862,
        870,1,0,0,0,863,865,3,124,62,0,864,863,1,0,0,0,864,865,1,0,0,0,865,
        867,1,0,0,0,866,868,3,122,61,0,867,866,1,0,0,0,867,868,1,0,0,0,868,
        870,1,0,0,0,869,858,1,0,0,0,869,864,1,0,0,0,870,892,1,0,0,0,871,
        873,5,40,0,0,872,871,1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,
        875,5,13,0,0,875,877,3,118,59,0,876,878,5,41,0,0,877,876,1,0,0,0,
        877,878,1,0,0,0,878,879,1,0,0,0,879,880,5,14,0,0,880,893,1,0,0,0,
        881,883,5,42,0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,
        884,885,5,13,0,0,885,887,3,118,59,0,886,888,5,43,0,0,887,886,1,0,
        0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,890,5,14,0,0,890,893,1,0,
        0,0,891,893,3,120,60,0,892,872,1,0,0,0,892,882,1,0,0,0,892,891,1,
        0,0,0,893,985,1,0,0,0,894,896,3,78,39,0,895,897,3,124,62,0,896,895,
        1,0,0,0,896,897,1,0,0,0,897,899,1,0,0,0,898,900,5,40,0,0,899,898,
        1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,902,7,14,0,0,902,903,
        3,110,55,0,903,905,7,15,0,0,904,906,5,41,0,0,905,904,1,0,0,0,905,
        906,1,0,0,0,906,985,1,0,0,0,907,909,3,78,39,0,908,910,3,124,62,0,
        909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,913,5,17,0,0,
        912,914,5,40,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,
        915,916,7,14,0,0,916,917,3,110,55,0,917,919,7,15,0,0,918,920,5,41,
        0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,922,5,18,
        0,0,922,985,1,0,0,0,923,944,5,46,0,0,924,925,3,122,61,0,925,926,
        3,124,62,0,926,945,1,0,0,0,927,928,3,124,62,0,928,929,3,122,61,0,
        929,945,1,0,0,0,930,931,5,136,0,0,931,932,5,17,0,0,932,933,5,18,
        0,0,933,934,1,0,0,0,934,935,5,137,0,0,935,936,5,17,0,0,936,945,5,
        18,0,0,937,938,5,137,0,0,938,939,5,17,0,0,939,940,5,18,0,0,940,941,
        1,0,0,0,941,942,5,136,0,0,942,943,5,17,0,0,943,945,5,18,0,0,944,
        924,1,0,0,0,944,927,1,0,0,0,944,930,1,0,0,0,944,937,1,0,0,0,944,
        945,1,0,0,0,945,952,1,0,0,0,946,948,3,34,17,0,947,946,1,0,0,0,947,
        948,1,0,0,0,948,949,1,0,0,0,949,953,5,142,0,0,950,953,3,90,45,0,
        951,953,3,34,17,0,952,947,1,0,0,0,952,950,1,0,0,0,952,951,1,0,0,
        0,953,985,1,0,0,0,954,959,5,83,0,0,955,956,5,23,0,0,956,957,3,32,
        16,0,957,958,5,24,0,0,958,960,1,0,0,0,959,955,1,0,0,0,959,960,1,
        0,0,0,960,961,1,0,0,0,961,962,5,17,0,0,962,963,3,32,16,0,963,964,
        5,18,0,0,964,985,1,0,0,0,965,972,7,16,0,0,966,967,3,126,63,0,967,
        968,3,124,62,0,968,973,1,0,0,0,969,970,3,124,62,0,970,971,3,126,
        63,0,971,973,1,0,0,0,972,966,1,0,0,0,972,969,1,0,0,0,973,974,1,0,
        0,0,974,975,3,36,18,0,975,985,1,0,0,0,976,977,5,44,0,0,977,978,3,
        112,56,0,978,979,3,36,18,0,979,985,1,0,0,0,980,982,5,143,0,0,981,
        983,3,124,62,0,982,981,1,0,0,0,982,983,1,0,0,0,983,985,1,0,0,0,984,
        818,1,0,0,0,984,856,1,0,0,0,984,894,1,0,0,0,984,907,1,0,0,0,984,
        923,1,0,0,0,984,954,1,0,0,0,984,965,1,0,0,0,984,976,1,0,0,0,984,
        980,1,0,0,0,985,107,1,0,0,0,986,987,3,32,16,0,987,988,5,140,0,0,
        988,989,3,108,54,0,989,992,1,0,0,0,990,992,3,32,16,0,991,986,1,0,
        0,0,991,990,1,0,0,0,992,109,1,0,0,0,993,1002,3,82,41,0,994,995,3,
        32,16,0,995,996,5,140,0,0,996,1002,1,0,0,0,997,998,3,32,16,0,998,
        999,5,140,0,0,999,1000,3,108,54,0,1000,1002,1,0,0,0,1001,993,1,0,
        0,0,1001,994,1,0,0,0,1001,997,1,0,0,0,1002,111,1,0,0,0,1003,1004,
        5,136,0,0,1004,1005,5,17,0,0,1005,1006,7,17,0,0,1006,1007,5,45,0,
        0,1007,1012,3,32,16,0,1008,1009,5,137,0,0,1009,1010,5,17,0,0,1010,
        1011,7,8,0,0,1011,1013,5,18,0,0,1012,1008,1,0,0,0,1012,1013,1,0,
        0,0,1013,1014,1,0,0,0,1014,1015,5,18,0,0,1015,113,1,0,0,0,1016,1017,
        3,32,16,0,1017,115,1,0,0,0,1018,1019,3,38,19,0,1019,117,1,0,0,0,
        1020,1026,3,32,16,0,1021,1022,3,32,16,0,1022,1023,5,140,0,0,1023,
        1024,3,118,59,0,1024,1026,1,0,0,0,1025,1020,1,0,0,0,1025,1021,1,
        0,0,0,1026,119,1,0,0,0,1027,1028,3,38,19,0,1028,121,1,0,0,0,1029,
        1038,5,136,0,0,1030,1039,3,82,41,0,1031,1034,5,17,0,0,1032,1035,
        3,32,16,0,1033,1035,3,108,54,0,1034,1032,1,0,0,0,1034,1033,1,0,0,
        0,1035,1036,1,0,0,0,1036,1037,5,18,0,0,1037,1039,1,0,0,0,1038,1030,
        1,0,0,0,1038,1031,1,0,0,0,1039,123,1,0,0,0,1040,1046,5,137,0,0,1041,
        1047,3,82,41,0,1042,1043,5,17,0,0,1043,1044,3,32,16,0,1044,1045,
        5,18,0,0,1045,1047,1,0,0,0,1046,1041,1,0,0,0,1046,1042,1,0,0,0,1047,
        125,1,0,0,0,1048,1049,5,136,0,0,1049,1050,5,17,0,0,1050,1051,3,30,
        15,0,1051,1052,5,18,0,0,1052,127,1,0,0,0,1053,1054,5,136,0,0,1054,
        1055,5,17,0,0,1055,1056,3,30,15,0,1056,1057,5,18,0,0,1057,129,1,
        0,0,0,92,132,142,148,162,169,178,182,190,196,204,208,218,222,231,
        242,282,291,308,319,330,338,340,348,351,357,364,370,378,384,392,
        406,409,413,426,429,433,451,463,577,595,645,679,713,723,726,731,
        741,753,763,792,808,816,820,823,826,829,831,834,839,844,849,854,
        858,861,864,867,869,872,877,882,887,892,896,899,905,909,913,919,
        944,947,952,959,972,982,984,991,1001,1012,1025,1034,1038,1046
    ]

class LatexParser ( Parser ):

    grammarFileName = "Latex.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'^T'", "'^{T}'", "'^{\\top}'", "'''", 
                     "<INVALID>", "'\\$'", "'\\,'", "'+'", "'-'", "<INVALID>", 
                     "<INVALID>", "'\\u00B1'", "'('", "')'", "'\\lgroup'", 
                     "'\\rgroup'", "'{'", "'}'", "'\\{'", "'\\}'", "'\\lbrace'", 
                     "'\\rbrace'", "'['", "']'", "'\\lbrack'", "'\\rbrack'", 
                     "'|'", "'\\lvert'", "'\\rvert'", "'\\vert'", "'\\|'", 
                     "'\\lfloor'", "'\\rfloor'", "'\\llcorner'", "'\\lrcorner'", 
                     "'\\lceil'", "'\\rceil'", "'\\ulcorner'", "'\\urcorner'", 
                     "'\\left'", "'\\right'", "'\\mleft'", "'\\mright'", 
                     "'\\lim'", "<INVALID>", "'\\int'", "'\\sum'", "'\\prod'", 
                     "'\\log'", "'\\ln'", "'\\exp'", "'\\sin'", "'\\cos'", 
                     "'\\tan'", "'\\csc'", "'\\sec'", "'\\cot'", "'\\arcsin'", 
                     "'\\arccos'", "'\\arctan'", "'\\arccsc'", "'\\arcsec'", 
                     "'\\arccot'", "'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\arsinh'", 
                     "'\\arcosh'", "'\\artanh'", "'\\arcsinh'", "'\\arccosh'", 
                     "'\\arctanh'", "'arsinh'", "'arcsinh'", "'arcosh'", 
                     "'arccosh'", "'artanh'", "'arctanh'", "'gcd'", "'lcm'", 
                     "'floor'", "'ceil'", "'\\sqrt'", "'\\gcd'", "'\\lcm'", 
                     "'\\floor'", "'\\ceil'", "'\\max'", "'\\min'", "'\\det'", 
                     "'eye'", "'zeros'", "'ones'", "'cols'", "'rows'", "'diag'", 
                     "'norm'", "'rank'", "<INVALID>", "'rref'", "'hstack'", 
                     "'vstack'", "<INVALID>", "'nullspace'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\triangle'", 
                     "'\\times'", "'\\cdot'", "'\\cdots'", "'\\div'", "'\\frac'", 
                     "<INVALID>", "'\\choose'", "'\\mod'", "'\\pm'", "'\\text'", 
                     "'\\mathit'", "'\\operatorname'", "'matrix'", "'pmatrix'", 
                     "'bmatrix'", "'vmatrix'", "'cases'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'&'", "'\\\\'", "'_'", "'^'", "':'", 
                     "';'", "','", "'.'", "<INVALID>", "<INVALID>", "'E'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\in'", "'='", 
                     "<INVALID>", "'<'", "<INVALID>", "'>'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WS", "DOLLAR_SIGN", "STYPE", "ADD", 
                      "SUB", "MUL", "DIV", "PM", "L_PAREN", "R_PAREN", "L_GROUP", 
                      "R_GROUP", "L_BRACE", "R_BRACE", "L_BRACE_VISUAL", 
                      "R_BRACE_VISUAL", "L_BRACE_CMD", "R_BRACE_CMD", "L_BRACKET", 
                      "R_BRACKET", "L_BRACK", "R_BRACK", "BAR", "L_VERT", 
                      "R_VERT", "VERT", "NORM", "L_FLOOR", "R_FLOOR", "LL_CORNER", 
                      "LR_CORNER", "L_CEIL", "R_CEIL", "UL_CORNER", "UR_CORNER", 
                      "L_LEFT", "R_RIGHT", "ML_LEFT", "MR_RIGHT", "FUNC_LIM", 
                      "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_SUM", "FUNC_PROD", 
                      "FUNC_LOG", "FUNC_LN", "FUNC_EXP", "FUNC_SIN", "FUNC_COS", 
                      "FUNC_TAN", "FUNC_CSC", "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", 
                      "FUNC_ARCCOS", "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", 
                      "FUNC_ARCCOT", "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", 
                      "FUNC_ARSINH", "FUNC_ARCOSH", "FUNC_ARTANH", "FUNC_ARCSINH", 
                      "FUNC_ARCCOSH", "FUNC_ARCTANH", "FUNC_ARSINH_NAME", 
                      "FUNC_ARCSINH_NAME", "FUNC_ARCOSH_NAME", "FUNC_ARCCOSH_NAME", 
                      "FUNC_ARTANH_NAME", "FUNC_ARCTANH_NAME", "FUNC_GCD_NAME", 
                      "FUNC_LCM_NAME", "FUNC_FLOOR_NAME", "FUNC_CEIL_NAME", 
                      "FUNC_SQRT", "FUNC_GCD", "FUNC_LCM", "FUNC_FLOOR", 
                      "FUNC_CEIL", "FUNC_MAX", "FUNC_MIN", "FUNC_DET", "FUNC_EYE_NAME", 
                      "FUNC_ZEROS_NAME", "FUNC_ONES_NAME", "FUNC_COLS_NAME", 
                      "FUNC_ROWS_NAME", "FUNC_DIAG_NAME", "FUNC_NORM_NAME", 
                      "FUNC_RANK_NAME", "FUNC_TRACE_NAME", "FUNC_RREF_NAME", 
                      "FUNC_HSTACK_NAME", "FUNC_VSTACK_NAME", "FUNC_ORTHOGONALIZE_NAME", 
                      "FUNC_NULLSPACE_NAME", "FUNC_DIAGONALIZE_NAME", "FUNC_EIGENVALS_NAME", 
                      "FUNC_EIGENVECTORS_NAME", "FUNC_SVD_NAME", "FUNC_TRIANGLE", 
                      "CMD_TIMES", "CMD_CDOT", "CMD_CDOTS", "CMD_DIV", "CMD_FRAC", 
                      "CMD_BINOM", "CMD_CHOOSE", "CMD_MOD", "CMD_PM", "CMD_TEXT", 
                      "CMD_MATHIT", "CMD_OPERATORNAME", "MATRIX_TYPE_MATRIX", 
                      "MATRIX_TYPE_PMATRIX", "MATRIX_TYPE_BMATRIX", "MATRIX_TYPE_DET", 
                      "MATRIX_TYPE_CASES", "MATRIX_TYPES", "CMD_MATRIX_START", 
                      "CMD_MATRIX_END", "CMD_DET_START", "CMD_DET_END", 
                      "CMD_CASES_START", "CMD_CASES_END", "MATRIX_DEL_COL", 
                      "MATRIX_DEL_ROW", "UNDERSCORE", "CARET", "COLON", 
                      "SEMICOLON", "COMMA", "PERIOD", "DIFFERENTIAL", "EXP_E", 
                      "E_NOTATION_E", "LETTER_NO_E", "TRIANGLE_LETTER", 
                      "TEXT_LETTER", "MATRIX_XRIGHTARROW", "TRANSFORM_EXCHANGE", 
                      "NUMBER", "E_NOTATION", "IN", "ASSIGNMENT", "EQUAL", 
                      "LT", "LTE", "GT", "GTE", "UNEQUAL", "AROUND", "BANG", 
                      "PERCENT_NUMBER", "SYMBOL", "VARIABLE", "OTHER_SYMBOL_CMD", 
                      "GREEK_CMD", "ACCENT_SYMBOL" ]

    RULE_formula = 0
    RULE_transpose = 1
    RULE_transform_atom = 2
    RULE_transform_scale = 3
    RULE_transform_swap = 4
    RULE_transform_assignment = 5
    RULE_elementary_transform = 6
    RULE_elementary_transforms = 7
    RULE_matrix = 8
    RULE_det = 9
    RULE_cases = 10
    RULE_matrix_row = 11
    RULE_relation = 12
    RULE_relation_list = 13
    RULE_relation_list_content = 14
    RULE_equality = 15
    RULE_expr = 16
    RULE_additive = 17
    RULE_mp = 18
    RULE_mp_nofunc = 19
    RULE_unary = 20
    RULE_unary_nofunc = 21
    RULE_postfix = 22
    RULE_postfix_nofunc = 23
    RULE_postfix_op = 24
    RULE_eval_at = 25
    RULE_eval_at_sub = 26
    RULE_eval_at_sup = 27
    RULE_exp = 28
    RULE_exp_nofunc = 29
    RULE_triangle = 30
    RULE_comp = 31
    RULE_comp_nofunc = 32
    RULE_group = 33
    RULE_norm_group = 34
    RULE_abs_group = 35
    RULE_floor_group = 36
    RULE_ceil_group = 37
    RULE_accent = 38
    RULE_atom_expr_no_supexpr = 39
    RULE_atom_expr = 40
    RULE_atom = 41
    RULE_mathit = 42
    RULE_mathit_text = 43
    RULE_text = 44
    RULE_frac = 45
    RULE_binom = 46
    RULE_func_normal_functions_single_arg = 47
    RULE_func_normal_functions_multi_arg = 48
    RULE_func_operator_names_single_arg = 49
    RULE_func_operator_names_multi_arg = 50
    RULE_func_normal_single_arg = 51
    RULE_func_normal_multi_arg = 52
    RULE_func = 53
    RULE_args = 54
    RULE_func_common_args = 55
    RULE_limit_sub = 56
    RULE_func_single_arg = 57
    RULE_func_single_arg_noparens = 58
    RULE_func_multi_arg = 59
    RULE_func_multi_arg_noparens = 60
    RULE_subexpr = 61
    RULE_supexpr = 62
    RULE_subeq = 63
    RULE_supeq = 64

    ruleNames =  [ "formula", "transpose", "transform_atom", "transform_scale", 
                   "transform_swap", "transform_assignment", "elementary_transform", 
                   "elementary_transforms", "matrix", "det", "cases", "matrix_row", 
                   "relation", "relation_list", "relation_list_content", 
                   "equality", "expr", "additive", "mp", "mp_nofunc", "unary", 
                   "unary_nofunc", "postfix", "postfix_nofunc", "postfix_op", 
                   "eval_at", "eval_at_sub", "eval_at_sup", "exp", "exp_nofunc", 
                   "triangle", "comp", "comp_nofunc", "group", "norm_group", 
                   "abs_group", "floor_group", "ceil_group", "accent", "atom_expr_no_supexpr", 
                   "atom_expr", "atom", "mathit", "mathit_text", "text", 
                   "frac", "binom", "func_normal_functions_single_arg", 
                   "func_normal_functions_multi_arg", "func_operator_names_single_arg", 
                   "func_operator_names_multi_arg", "func_normal_single_arg", 
                   "func_normal_multi_arg", "func", "args", "func_common_args", 
                   "limit_sub", "func_single_arg", "func_single_arg_noparens", 
                   "func_multi_arg", "func_multi_arg_noparens", "subexpr", 
                   "supexpr", "subeq", "supeq" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    WS=5
    DOLLAR_SIGN=6
    STYPE=7
    ADD=8
    SUB=9
    MUL=10
    DIV=11
    PM=12
    L_PAREN=13
    R_PAREN=14
    L_GROUP=15
    R_GROUP=16
    L_BRACE=17
    R_BRACE=18
    L_BRACE_VISUAL=19
    R_BRACE_VISUAL=20
    L_BRACE_CMD=21
    R_BRACE_CMD=22
    L_BRACKET=23
    R_BRACKET=24
    L_BRACK=25
    R_BRACK=26
    BAR=27
    L_VERT=28
    R_VERT=29
    VERT=30
    NORM=31
    L_FLOOR=32
    R_FLOOR=33
    LL_CORNER=34
    LR_CORNER=35
    L_CEIL=36
    R_CEIL=37
    UL_CORNER=38
    UR_CORNER=39
    L_LEFT=40
    R_RIGHT=41
    ML_LEFT=42
    MR_RIGHT=43
    FUNC_LIM=44
    LIM_APPROACH_SYM=45
    FUNC_INT=46
    FUNC_SUM=47
    FUNC_PROD=48
    FUNC_LOG=49
    FUNC_LN=50
    FUNC_EXP=51
    FUNC_SIN=52
    FUNC_COS=53
    FUNC_TAN=54
    FUNC_CSC=55
    FUNC_SEC=56
    FUNC_COT=57
    FUNC_ARCSIN=58
    FUNC_ARCCOS=59
    FUNC_ARCTAN=60
    FUNC_ARCCSC=61
    FUNC_ARCSEC=62
    FUNC_ARCCOT=63
    FUNC_SINH=64
    FUNC_COSH=65
    FUNC_TANH=66
    FUNC_ARSINH=67
    FUNC_ARCOSH=68
    FUNC_ARTANH=69
    FUNC_ARCSINH=70
    FUNC_ARCCOSH=71
    FUNC_ARCTANH=72
    FUNC_ARSINH_NAME=73
    FUNC_ARCSINH_NAME=74
    FUNC_ARCOSH_NAME=75
    FUNC_ARCCOSH_NAME=76
    FUNC_ARTANH_NAME=77
    FUNC_ARCTANH_NAME=78
    FUNC_GCD_NAME=79
    FUNC_LCM_NAME=80
    FUNC_FLOOR_NAME=81
    FUNC_CEIL_NAME=82
    FUNC_SQRT=83
    FUNC_GCD=84
    FUNC_LCM=85
    FUNC_FLOOR=86
    FUNC_CEIL=87
    FUNC_MAX=88
    FUNC_MIN=89
    FUNC_DET=90
    FUNC_EYE_NAME=91
    FUNC_ZEROS_NAME=92
    FUNC_ONES_NAME=93
    FUNC_COLS_NAME=94
    FUNC_ROWS_NAME=95
    FUNC_DIAG_NAME=96
    FUNC_NORM_NAME=97
    FUNC_RANK_NAME=98
    FUNC_TRACE_NAME=99
    FUNC_RREF_NAME=100
    FUNC_HSTACK_NAME=101
    FUNC_VSTACK_NAME=102
    FUNC_ORTHOGONALIZE_NAME=103
    FUNC_NULLSPACE_NAME=104
    FUNC_DIAGONALIZE_NAME=105
    FUNC_EIGENVALS_NAME=106
    FUNC_EIGENVECTORS_NAME=107
    FUNC_SVD_NAME=108
    FUNC_TRIANGLE=109
    CMD_TIMES=110
    CMD_CDOT=111
    CMD_CDOTS=112
    CMD_DIV=113
    CMD_FRAC=114
    CMD_BINOM=115
    CMD_CHOOSE=116
    CMD_MOD=117
    CMD_PM=118
    CMD_TEXT=119
    CMD_MATHIT=120
    CMD_OPERATORNAME=121
    MATRIX_TYPE_MATRIX=122
    MATRIX_TYPE_PMATRIX=123
    MATRIX_TYPE_BMATRIX=124
    MATRIX_TYPE_DET=125
    MATRIX_TYPE_CASES=126
    MATRIX_TYPES=127
    CMD_MATRIX_START=128
    CMD_MATRIX_END=129
    CMD_DET_START=130
    CMD_DET_END=131
    CMD_CASES_START=132
    CMD_CASES_END=133
    MATRIX_DEL_COL=134
    MATRIX_DEL_ROW=135
    UNDERSCORE=136
    CARET=137
    COLON=138
    SEMICOLON=139
    COMMA=140
    PERIOD=141
    DIFFERENTIAL=142
    EXP_E=143
    E_NOTATION_E=144
    LETTER_NO_E=145
    TRIANGLE_LETTER=146
    TEXT_LETTER=147
    MATRIX_XRIGHTARROW=148
    TRANSFORM_EXCHANGE=149
    NUMBER=150
    E_NOTATION=151
    IN=152
    ASSIGNMENT=153
    EQUAL=154
    LT=155
    LTE=156
    GT=157
    GTE=158
    UNEQUAL=159
    AROUND=160
    BANG=161
    PERCENT_NUMBER=162
    SYMBOL=163
    VARIABLE=164
    OTHER_SYMBOL_CMD=165
    GREEK_CMD=166
    ACCENT_SYMBOL=167

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FormulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(LatexParser.RelationContext,0)


        def relation_list(self):
            return self.getTypedRuleContext(LatexParser.Relation_listContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormula" ):
                listener.enterFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormula" ):
                listener.exitFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormula" ):
                return visitor.visitFormula(self)
            else:
                return visitor.visitChildren(self)




    def formula(self):

        localctx = LatexParser.FormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_formula)
        try:
            self.state = 132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 130
                self.relation(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 131
                self.relation_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LatexParser.RULE_transpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranspose" ):
                listener.enterTranspose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranspose" ):
                listener.exitTranspose(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranspose" ):
                return visitor.visitTranspose(self)
            else:
                return visitor.visitChildren(self)




    def transpose(self):

        localctx = LatexParser.TransposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_transpose)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 30) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(LatexParser.LETTER_NO_E, 0)

        def UNDERSCORE(self):
            return self.getToken(LatexParser.UNDERSCORE, 0)

        def NUMBER(self):
            return self.getToken(LatexParser.NUMBER, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_transform_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_atom" ):
                listener.enterTransform_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_atom" ):
                listener.exitTransform_atom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransform_atom" ):
                return visitor.visitTransform_atom(self)
            else:
                return visitor.visitChildren(self)




    def transform_atom(self):

        localctx = LatexParser.Transform_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_transform_atom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 136
            self.match(LatexParser.LETTER_NO_E)
            self.state = 137
            self.match(LatexParser.UNDERSCORE)
            self.state = 142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [150]:
                self.state = 138
                self.match(LatexParser.NUMBER)
                pass
            elif token in [17]:
                self.state = 139
                self.match(LatexParser.L_BRACE)
                self.state = 140
                self.match(LatexParser.NUMBER)
                self.state = 141
                self.match(LatexParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_scaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self):
            return self.getTypedRuleContext(LatexParser.Transform_atomContext,0)


        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def group(self):
            return self.getTypedRuleContext(LatexParser.GroupContext,0)


        def ADD(self):
            return self.getToken(LatexParser.ADD, 0)

        def SUB(self):
            return self.getToken(LatexParser.SUB, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_transform_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_scale" ):
                listener.enterTransform_scale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_scale" ):
                listener.exitTransform_scale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransform_scale" ):
                return visitor.visitTransform_scale(self)
            else:
                return visitor.visitChildren(self)




    def transform_scale(self):

        localctx = LatexParser.Transform_scaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_transform_scale)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 144
                self.expr()
                pass

            elif la_ == 2:
                self.state = 145
                self.group()
                pass

            elif la_ == 3:
                self.state = 146
                self.match(LatexParser.ADD)
                pass

            elif la_ == 4:
                self.state = 147
                self.match(LatexParser.SUB)
                pass


            self.state = 150
            self.transform_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_swapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Transform_atomContext)
            else:
                return self.getTypedRuleContext(LatexParser.Transform_atomContext,i)


        def TRANSFORM_EXCHANGE(self):
            return self.getToken(LatexParser.TRANSFORM_EXCHANGE, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_transform_swap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_swap" ):
                listener.enterTransform_swap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_swap" ):
                listener.exitTransform_swap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransform_swap" ):
                return visitor.visitTransform_swap(self)
            else:
                return visitor.visitChildren(self)




    def transform_swap(self):

        localctx = LatexParser.Transform_swapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_transform_swap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.transform_atom()
            self.state = 153
            self.match(LatexParser.TRANSFORM_EXCHANGE)
            self.state = 154
            self.transform_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self):
            return self.getTypedRuleContext(LatexParser.Transform_atomContext,0)


        def transform_scale(self):
            return self.getTypedRuleContext(LatexParser.Transform_scaleContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_transform_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_assignment" ):
                listener.enterTransform_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_assignment" ):
                listener.exitTransform_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransform_assignment" ):
                return visitor.visitTransform_assignment(self)
            else:
                return visitor.visitChildren(self)




    def transform_assignment(self):

        localctx = LatexParser.Transform_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_transform_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.transform_atom()
            self.state = 157
            self.transform_scale()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_transformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_assignment(self):
            return self.getTypedRuleContext(LatexParser.Transform_assignmentContext,0)


        def transform_scale(self):
            return self.getTypedRuleContext(LatexParser.Transform_scaleContext,0)


        def transform_swap(self):
            return self.getTypedRuleContext(LatexParser.Transform_swapContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_elementary_transform

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_transform" ):
                listener.enterElementary_transform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_transform" ):
                listener.exitElementary_transform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementary_transform" ):
                return visitor.visitElementary_transform(self)
            else:
                return visitor.visitChildren(self)




    def elementary_transform(self):

        localctx = LatexParser.Elementary_transformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_elementary_transform)
        try:
            self.state = 162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 159
                self.transform_assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 160
                self.transform_scale()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 161
                self.transform_swap()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_transformsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementary_transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Elementary_transformContext)
            else:
                return self.getTypedRuleContext(LatexParser.Elementary_transformContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.COMMA)
            else:
                return self.getToken(LatexParser.COMMA, i)

        def getRuleIndex(self):
            return LatexParser.RULE_elementary_transforms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_transforms" ):
                listener.enterElementary_transforms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_transforms" ):
                listener.exitElementary_transforms(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementary_transforms" ):
                return visitor.visitElementary_transforms(self)
            else:
                return visitor.visitChildren(self)




    def elementary_transforms(self):

        localctx = LatexParser.Elementary_transformsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_elementary_transforms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self.elementary_transform()
            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==140:
                self.state = 165
                self.match(LatexParser.COMMA)
                self.state = 166
                self.elementary_transform()
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATRIX_START(self):
            return self.getToken(LatexParser.CMD_MATRIX_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(LatexParser.Matrix_rowContext,i)


        def CMD_MATRIX_END(self):
            return self.getToken(LatexParser.CMD_MATRIX_END, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(LatexParser.MATRIX_DEL_ROW, i)

        def MATRIX_XRIGHTARROW(self):
            return self.getToken(LatexParser.MATRIX_XRIGHTARROW, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def elementary_transforms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Elementary_transformsContext)
            else:
                return self.getTypedRuleContext(LatexParser.Elementary_transformsContext,i)


        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def L_BRACKET(self):
            return self.getToken(LatexParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LatexParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatrix" ):
                return visitor.visitMatrix(self)
            else:
                return visitor.visitChildren(self)




    def matrix(self):

        localctx = LatexParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_matrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(LatexParser.CMD_MATRIX_START)
            self.state = 173
            self.matrix_row()
            self.state = 178
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 174
                    self.match(LatexParser.MATRIX_DEL_ROW)
                    self.state = 175
                    self.matrix_row() 
                self.state = 180
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 181
                self.match(LatexParser.MATRIX_DEL_ROW)


            self.state = 184
            self.match(LatexParser.CMD_MATRIX_END)
            self.state = 196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 185
                self.match(LatexParser.MATRIX_XRIGHTARROW)
                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 186
                    self.match(LatexParser.L_BRACKET)
                    self.state = 187
                    self.elementary_transforms()
                    self.state = 188
                    self.match(LatexParser.R_BRACKET)


                self.state = 192
                self.match(LatexParser.L_BRACE)
                self.state = 193
                self.elementary_transforms()
                self.state = 194
                self.match(LatexParser.R_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DET_START(self):
            return self.getToken(LatexParser.CMD_DET_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(LatexParser.Matrix_rowContext,i)


        def CMD_DET_END(self):
            return self.getToken(LatexParser.CMD_DET_END, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(LatexParser.MATRIX_DEL_ROW, i)

        def getRuleIndex(self):
            return LatexParser.RULE_det

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDet" ):
                listener.enterDet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDet" ):
                listener.exitDet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDet" ):
                return visitor.visitDet(self)
            else:
                return visitor.visitChildren(self)




    def det(self):

        localctx = LatexParser.DetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_det)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(LatexParser.CMD_DET_START)
            self.state = 199
            self.matrix_row()
            self.state = 204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 200
                    self.match(LatexParser.MATRIX_DEL_ROW)
                    self.state = 201
                    self.matrix_row() 
                self.state = 206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 207
                self.match(LatexParser.MATRIX_DEL_ROW)


            self.state = 210
            self.match(LatexParser.CMD_DET_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_CASES_START(self):
            return self.getToken(LatexParser.CMD_CASES_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(LatexParser.Matrix_rowContext,i)


        def CMD_CASES_END(self):
            return self.getToken(LatexParser.CMD_CASES_END, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(LatexParser.MATRIX_DEL_ROW, i)

        def getRuleIndex(self):
            return LatexParser.RULE_cases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCases" ):
                listener.enterCases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCases" ):
                listener.exitCases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCases" ):
                return visitor.visitCases(self)
            else:
                return visitor.visitChildren(self)




    def cases(self):

        localctx = LatexParser.CasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.match(LatexParser.CMD_CASES_START)
            self.state = 213
            self.matrix_row()
            self.state = 218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 214
                    self.match(LatexParser.MATRIX_DEL_ROW)
                    self.state = 215
                    self.matrix_row() 
                self.state = 220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 221
                self.match(LatexParser.MATRIX_DEL_ROW)


            self.state = 224
            self.match(LatexParser.CMD_CASES_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LatexParser.RULE_matrix_row

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MatrixRowContext(Matrix_rowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LatexParser.Matrix_rowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.RelationContext)
            else:
                return self.getTypedRuleContext(LatexParser.RelationContext,i)

        def MATRIX_DEL_COL(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.MATRIX_DEL_COL)
            else:
                return self.getToken(LatexParser.MATRIX_DEL_COL, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrixRow" ):
                listener.enterMatrixRow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrixRow" ):
                listener.exitMatrixRow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatrixRow" ):
                return visitor.visitMatrixRow(self)
            else:
                return visitor.visitChildren(self)



    def matrix_row(self):

        localctx = LatexParser.Matrix_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_matrix_row)
        self._la = 0 # Token type
        try:
            localctx = LatexParser.MatrixRowContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.relation(0)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==134:
                self.state = 227
                self.match(LatexParser.MATRIX_DEL_COL)
                self.state = 228
                self.relation(0)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.RelationContext)
            else:
                return self.getTypedRuleContext(LatexParser.RelationContext,i)


        def IN(self):
            return self.getToken(LatexParser.IN, 0)

        def ASSIGNMENT(self):
            return self.getToken(LatexParser.ASSIGNMENT, 0)

        def EQUAL(self):
            return self.getToken(LatexParser.EQUAL, 0)

        def LT(self):
            return self.getToken(LatexParser.LT, 0)

        def LTE(self):
            return self.getToken(LatexParser.LTE, 0)

        def GT(self):
            return self.getToken(LatexParser.GT, 0)

        def GTE(self):
            return self.getToken(LatexParser.GTE, 0)

        def UNEQUAL(self):
            return self.getToken(LatexParser.UNEQUAL, 0)

        def AROUND(self):
            return self.getToken(LatexParser.AROUND, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LatexParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 242
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LatexParser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 237
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 238
                    _la = self._input.LA(1)
                    if not(((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 511) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 239
                    self.relation(3) 
                self.state = 244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Relation_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_list_content(self):
            return self.getTypedRuleContext(LatexParser.Relation_list_contentContext,0)


        def L_BRACKET(self):
            return self.getToken(LatexParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LatexParser.R_BRACKET, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(LatexParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(LatexParser.R_BRACE_VISUAL, 0)

        def L_LEFT(self):
            return self.getToken(LatexParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LatexParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LatexParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LatexParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_relation_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_list" ):
                listener.enterRelation_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_list" ):
                listener.exitRelation_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation_list" ):
                return visitor.visitRelation_list(self)
            else:
                return visitor.visitChildren(self)




    def relation_list(self):

        localctx = LatexParser.Relation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_relation_list)
        try:
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.relation_list_content()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 246
                self.match(LatexParser.L_BRACKET)
                self.state = 247
                self.relation_list_content()
                self.state = 248
                self.match(LatexParser.R_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 250
                self.match(LatexParser.L_BRACE)
                self.state = 251
                self.relation_list_content()
                self.state = 252
                self.match(LatexParser.R_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 254
                self.match(LatexParser.L_BRACE_VISUAL)
                self.state = 255
                self.relation_list_content()
                self.state = 256
                self.match(LatexParser.R_BRACE_VISUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 258
                self.match(LatexParser.L_LEFT)
                self.state = 259
                self.match(LatexParser.L_BRACKET)
                self.state = 260
                self.relation_list_content()
                self.state = 261
                self.match(LatexParser.R_RIGHT)
                self.state = 262
                self.match(LatexParser.R_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 264
                self.match(LatexParser.L_LEFT)
                self.state = 265
                self.match(LatexParser.L_BRACE_VISUAL)
                self.state = 266
                self.relation_list_content()
                self.state = 267
                self.match(LatexParser.R_RIGHT)
                self.state = 268
                self.match(LatexParser.R_BRACE_VISUAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 270
                self.match(LatexParser.ML_LEFT)
                self.state = 271
                self.match(LatexParser.L_BRACKET)
                self.state = 272
                self.relation_list_content()
                self.state = 273
                self.match(LatexParser.MR_RIGHT)
                self.state = 274
                self.match(LatexParser.R_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 276
                self.match(LatexParser.ML_LEFT)
                self.state = 277
                self.match(LatexParser.L_BRACE_VISUAL)
                self.state = 278
                self.relation_list_content()
                self.state = 279
                self.match(LatexParser.MR_RIGHT)
                self.state = 280
                self.match(LatexParser.R_BRACE_VISUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_list_contentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LatexParser.RULE_relation_list_content

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RelationListContentContext(Relation_list_contentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LatexParser.Relation_list_contentContext
            super().__init__(parser)
            self.connect = None # Token
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.RelationContext)
            else:
                return self.getTypedRuleContext(LatexParser.RelationContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.COMMA)
            else:
                return self.getToken(LatexParser.COMMA, i)
        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.SEMICOLON)
            else:
                return self.getToken(LatexParser.SEMICOLON, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationListContent" ):
                listener.enterRelationListContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationListContent" ):
                listener.exitRelationListContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationListContent" ):
                return visitor.visitRelationListContent(self)
            else:
                return visitor.visitChildren(self)



    def relation_list_content(self):

        localctx = LatexParser.Relation_list_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_relation_list_content)
        self._la = 0 # Token type
        try:
            localctx = LatexParser.RelationListContentContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.relation(0)
            self.state = 285
            localctx.connect = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==139 or _la==140):
                localctx.connect = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 286
            self.relation(0)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==139 or _la==140:
                self.state = 287
                localctx.connect = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==139 or _la==140):
                    localctx.connect = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 288
                self.relation(0)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.ExprContext)
            else:
                return self.getTypedRuleContext(LatexParser.ExprContext,i)


        def EQUAL(self):
            return self.getToken(LatexParser.EQUAL, 0)

        def ASSIGNMENT(self):
            return self.getToken(LatexParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality" ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality" ):
                listener.exitEquality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquality" ):
                return visitor.visitEquality(self)
            else:
                return visitor.visitChildren(self)




    def equality(self):

        localctx = LatexParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_equality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.expr()
            self.state = 295
            _la = self._input.LA(1)
            if not(_la==153 or _la==154):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 296
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive(self):
            return self.getTypedRuleContext(LatexParser.AdditiveContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = LatexParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.additive(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(LatexParser.MpContext,0)


        def additive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(LatexParser.AdditiveContext,i)


        def ADD(self):
            return self.getToken(LatexParser.ADD, 0)

        def SUB(self):
            return self.getToken(LatexParser.SUB, 0)

        def CMD_PM(self):
            return self.getToken(LatexParser.CMD_PM, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_additive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive" ):
                listener.enterAdditive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive" ):
                listener.exitAdditive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditive" ):
                return visitor.visitAdditive(self)
            else:
                return visitor.visitChildren(self)



    def additive(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LatexParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_additive, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LatexParser.AdditiveContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
                    self.state = 303
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 304
                    _la = self._input.LA(1)
                    if not(_la==8 or _la==9 or _la==118):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 305
                    self.additive(3) 
                self.state = 310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LatexParser.UnaryContext,0)


        def mp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.MpContext)
            else:
                return self.getTypedRuleContext(LatexParser.MpContext,i)


        def MUL(self):
            return self.getToken(LatexParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LatexParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LatexParser.CMD_CDOT, 0)

        def CMD_CDOTS(self):
            return self.getToken(LatexParser.CMD_CDOTS, 0)

        def DIV(self):
            return self.getToken(LatexParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LatexParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LatexParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(LatexParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_mp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMp" ):
                listener.enterMp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMp" ):
                listener.exitMp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMp" ):
                return visitor.visitMp(self)
            else:
                return visitor.visitChildren(self)



    def mp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LatexParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_mp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LatexParser.MpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
                    self.state = 314
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 315
                    _la = self._input.LA(1)
                    if not(_la==10 or _la==11 or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 268435599) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 316
                    self.mp(3) 
                self.state = 321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LatexParser.Unary_nofuncContext,0)


        def mp_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(LatexParser.Mp_nofuncContext,i)


        def MUL(self):
            return self.getToken(LatexParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LatexParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LatexParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LatexParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LatexParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LatexParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(LatexParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_mp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMp_nofunc" ):
                listener.enterMp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMp_nofunc" ):
                listener.exitMp_nofunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMp_nofunc" ):
                return visitor.visitMp_nofunc(self)
            else:
                return visitor.visitChildren(self)



    def mp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LatexParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_mp_nofunc, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LatexParser.Mp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
                    self.state = 325
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 326
                    _la = self._input.LA(1)
                    if not(_la==10 or _la==11 or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 268435595) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 327
                    self.mp_nofunc(3) 
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LatexParser.UnaryContext,0)


        def ADD(self):
            return self.getToken(LatexParser.ADD, 0)

        def SUB(self):
            return self.getToken(LatexParser.SUB, 0)

        def PM(self):
            return self.getToken(LatexParser.PM, 0)

        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.PostfixContext)
            else:
                return self.getTypedRuleContext(LatexParser.PostfixContext,i)


        def getRuleIndex(self):
            return LatexParser.RULE_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary" ):
                return visitor.visitUnary(self)
            else:
                return visitor.visitChildren(self)




    def unary(self):

        localctx = LatexParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unary)
        self._la = 0 # Token type
        try:
            self.state = 340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4864) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 334
                self.unary()
                pass
            elif token in [13, 15, 17, 19, 21, 23, 25, 27, 28, 30, 31, 32, 34, 36, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 83, 84, 85, 86, 87, 88, 89, 90, 109, 114, 115, 119, 120, 121, 128, 130, 132, 142, 143, 145, 150, 151, 162, 163, 164, 166, 167]:
                self.enterOuterAlt(localctx, 2)
                self.state = 336 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 335
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 338 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LatexParser.Unary_nofuncContext,0)


        def ADD(self):
            return self.getToken(LatexParser.ADD, 0)

        def SUB(self):
            return self.getToken(LatexParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(LatexParser.PostfixContext,0)


        def postfix_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Postfix_nofuncContext)
            else:
                return self.getTypedRuleContext(LatexParser.Postfix_nofuncContext,i)


        def getRuleIndex(self):
            return LatexParser.RULE_unary_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_nofunc" ):
                listener.enterUnary_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_nofunc" ):
                listener.exitUnary_nofunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_nofunc" ):
                return visitor.visitUnary_nofunc(self)
            else:
                return visitor.visitChildren(self)




    def unary_nofunc(self):

        localctx = LatexParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unary_nofunc)
        self._la = 0 # Token type
        try:
            self.state = 351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 343
                self.unary_nofunc()
                pass
            elif token in [13, 15, 17, 19, 21, 23, 25, 27, 28, 30, 31, 32, 34, 36, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 83, 84, 85, 86, 87, 88, 89, 90, 109, 114, 115, 119, 120, 121, 128, 130, 132, 142, 143, 145, 150, 151, 162, 163, 164, 166, 167]:
                self.enterOuterAlt(localctx, 2)
                self.state = 344
                self.postfix()
                self.state = 348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 345
                        self.postfix_nofunc() 
                    self.state = 350
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(LatexParser.ExpContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LatexParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return LatexParser.RULE_postfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix" ):
                listener.enterPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix" ):
                listener.exitPostfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfix" ):
                return visitor.visitPostfix(self)
            else:
                return visitor.visitChildren(self)




    def postfix(self):

        localctx = LatexParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.exp(0)
            self.state = 357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 354
                    self.postfix_op() 
                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(LatexParser.Exp_nofuncContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LatexParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return LatexParser.RULE_postfix_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_nofunc" ):
                listener.enterPostfix_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_nofunc" ):
                listener.exitPostfix_nofunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfix_nofunc" ):
                return visitor.visitPostfix_nofunc(self)
            else:
                return visitor.visitChildren(self)




    def postfix_nofunc(self):

        localctx = LatexParser.Postfix_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.exp_nofunc(0)
            self.state = 364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 361
                    self.postfix_op() 
                self.state = 366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(LatexParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(LatexParser.Eval_atContext,0)


        def transpose(self):
            return self.getTypedRuleContext(LatexParser.TransposeContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_postfix_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_op" ):
                listener.enterPostfix_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_op" ):
                listener.exitPostfix_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfix_op" ):
                return visitor.visitPostfix_op(self)
            else:
                return visitor.visitChildren(self)




    def postfix_op(self):

        localctx = LatexParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_postfix_op)
        try:
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                self.match(LatexParser.BANG)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 368
                self.eval_at()
                pass
            elif token in [1, 2, 3, 4]:
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self.transpose()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(LatexParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(LatexParser.Eval_at_supContext,0)


        def eval_at_sub(self):
            return self.getTypedRuleContext(LatexParser.Eval_at_subContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_eval_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at" ):
                listener.enterEval_at(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at" ):
                listener.exitEval_at(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_at" ):
                return visitor.visitEval_at(self)
            else:
                return visitor.visitChildren(self)




    def eval_at(self):

        localctx = LatexParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(LatexParser.BAR)
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 373
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 374
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 375
                self.eval_at_sup()
                self.state = 376
                self.eval_at_sub()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LatexParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(LatexParser.EqualityContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_eval_at_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at_sub" ):
                listener.enterEval_at_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at_sub" ):
                listener.exitEval_at_sub(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_at_sub" ):
                return visitor.visitEval_at_sub(self)
            else:
                return visitor.visitChildren(self)




    def eval_at_sub(self):

        localctx = LatexParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(LatexParser.UNDERSCORE)
            self.state = 381
            self.match(LatexParser.L_BRACE)
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 382
                self.expr()
                pass

            elif la_ == 2:
                self.state = 383
                self.equality()
                pass


            self.state = 386
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_supContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LatexParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(LatexParser.EqualityContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_eval_at_sup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at_sup" ):
                listener.enterEval_at_sup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at_sup" ):
                listener.exitEval_at_sup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_at_sup" ):
                return visitor.visitEval_at_sup(self)
            else:
                return visitor.visitChildren(self)




    def eval_at_sup(self):

        localctx = LatexParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(LatexParser.CARET)
            self.state = 389
            self.match(LatexParser.L_BRACE)
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 390
                self.expr()
                pass

            elif la_ == 2:
                self.state = 391
                self.equality()
                pass


            self.state = 394
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(LatexParser.CompContext,0)


        def exp(self):
            return self.getTypedRuleContext(LatexParser.ExpContext,0)


        def CARET(self):
            return self.getToken(LatexParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LatexParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LatexParser.SubexprContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp" ):
                listener.enterExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp" ):
                listener.exitExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExp" ):
                return visitor.visitExp(self)
            else:
                return visitor.visitChildren(self)



    def exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LatexParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 413
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LatexParser.ExpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
                    self.state = 399
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 400
                    self.match(LatexParser.CARET)
                    self.state = 406
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [109, 119, 120, 142, 145, 150, 151, 162, 163, 164, 166, 167]:
                        self.state = 401
                        self.atom()
                        pass
                    elif token in [17]:
                        self.state = 402
                        self.match(LatexParser.L_BRACE)
                        self.state = 403
                        self.expr()
                        self.state = 404
                        self.match(LatexParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 409
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                    if la_ == 1:
                        self.state = 408
                        self.subexpr()

             
                self.state = 415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Exp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(LatexParser.Comp_nofuncContext,0)


        def exp_nofunc(self):
            return self.getTypedRuleContext(LatexParser.Exp_nofuncContext,0)


        def CARET(self):
            return self.getToken(LatexParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LatexParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LatexParser.SubexprContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_exp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_nofunc" ):
                listener.enterExp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_nofunc" ):
                listener.exitExp_nofunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExp_nofunc" ):
                return visitor.visitExp_nofunc(self)
            else:
                return visitor.visitChildren(self)



    def exp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LatexParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LatexParser.Exp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
                    self.state = 419
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 420
                    self.match(LatexParser.CARET)
                    self.state = 426
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [109, 119, 120, 142, 145, 150, 151, 162, 163, 164, 166, 167]:
                        self.state = 421
                        self.atom()
                        pass
                    elif token in [17]:
                        self.state = 422
                        self.match(LatexParser.L_BRACE)
                        self.state = 423
                        self.expr()
                        self.state = 424
                        self.match(LatexParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 429
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 428
                        self.subexpr()

             
                self.state = 435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TriangleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_TRIANGLE(self):
            return self.getToken(LatexParser.FUNC_TRIANGLE, 0)

        def TRIANGLE_LETTER(self):
            return self.getToken(LatexParser.TRIANGLE_LETTER, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_triangle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriangle" ):
                listener.enterTriangle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriangle" ):
                listener.exitTriangle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTriangle" ):
                return visitor.visitTriangle(self)
            else:
                return visitor.visitChildren(self)




    def triangle(self):

        localctx = LatexParser.TriangleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_triangle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(LatexParser.FUNC_TRIANGLE)
            self.state = 437
            self.match(LatexParser.TRIANGLE_LETTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LatexParser.GroupContext,0)


        def norm_group(self):
            return self.getTypedRuleContext(LatexParser.Norm_groupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(LatexParser.Abs_groupContext,0)


        def floor_group(self):
            return self.getTypedRuleContext(LatexParser.Floor_groupContext,0)


        def ceil_group(self):
            return self.getTypedRuleContext(LatexParser.Ceil_groupContext,0)


        def func(self):
            return self.getTypedRuleContext(LatexParser.FuncContext,0)


        def atom(self):
            return self.getTypedRuleContext(LatexParser.AtomContext,0)


        def frac(self):
            return self.getTypedRuleContext(LatexParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(LatexParser.BinomContext,0)


        def matrix(self):
            return self.getTypedRuleContext(LatexParser.MatrixContext,0)


        def det(self):
            return self.getTypedRuleContext(LatexParser.DetContext,0)


        def cases(self):
            return self.getTypedRuleContext(LatexParser.CasesContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp" ):
                return visitor.visitComp(self)
            else:
                return visitor.visitChildren(self)




    def comp(self):

        localctx = LatexParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_comp)
        try:
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 439
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 440
                self.norm_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 441
                self.abs_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 442
                self.floor_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 443
                self.ceil_group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 444
                self.func()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 445
                self.atom()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 446
                self.frac()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 447
                self.binom()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 448
                self.matrix()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 449
                self.det()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 450
                self.cases()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LatexParser.GroupContext,0)


        def norm_group(self):
            return self.getTypedRuleContext(LatexParser.Norm_groupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(LatexParser.Abs_groupContext,0)


        def floor_group(self):
            return self.getTypedRuleContext(LatexParser.Floor_groupContext,0)


        def ceil_group(self):
            return self.getTypedRuleContext(LatexParser.Ceil_groupContext,0)


        def atom(self):
            return self.getTypedRuleContext(LatexParser.AtomContext,0)


        def frac(self):
            return self.getTypedRuleContext(LatexParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(LatexParser.BinomContext,0)


        def matrix(self):
            return self.getTypedRuleContext(LatexParser.MatrixContext,0)


        def det(self):
            return self.getTypedRuleContext(LatexParser.DetContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_comp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_nofunc" ):
                listener.enterComp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_nofunc" ):
                listener.exitComp_nofunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_nofunc" ):
                return visitor.visitComp_nofunc(self)
            else:
                return visitor.visitChildren(self)




    def comp_nofunc(self):

        localctx = LatexParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_comp_nofunc)
        try:
            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 453
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 454
                self.norm_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 455
                self.abs_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 456
                self.floor_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 457
                self.ceil_group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 458
                self.atom()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 459
                self.frac()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 460
                self.binom()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 461
                self.matrix()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 462
                self.det()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LatexParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(LatexParser.R_PAREN, 0)

        def L_GROUP(self):
            return self.getToken(LatexParser.L_GROUP, 0)

        def R_GROUP(self):
            return self.getToken(LatexParser.R_GROUP, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(LatexParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(LatexParser.R_BRACE_VISUAL, 0)

        def L_BRACE_CMD(self):
            return self.getToken(LatexParser.L_BRACE_CMD, 0)

        def R_BRACE_CMD(self):
            return self.getToken(LatexParser.R_BRACE_CMD, 0)

        def L_BRACKET(self):
            return self.getToken(LatexParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LatexParser.R_BRACKET, 0)

        def L_BRACK(self):
            return self.getToken(LatexParser.L_BRACK, 0)

        def R_BRACK(self):
            return self.getToken(LatexParser.R_BRACK, 0)

        def L_LEFT(self):
            return self.getToken(LatexParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LatexParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LatexParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LatexParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = LatexParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_group)
        try:
            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.match(LatexParser.L_PAREN)
                self.state = 466
                self.expr()
                self.state = 467
                self.match(LatexParser.R_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.match(LatexParser.L_GROUP)
                self.state = 470
                self.expr()
                self.state = 471
                self.match(LatexParser.R_GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 473
                self.match(LatexParser.L_BRACE)
                self.state = 474
                self.expr()
                self.state = 475
                self.match(LatexParser.R_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 477
                self.match(LatexParser.L_BRACE_VISUAL)
                self.state = 478
                self.expr()
                self.state = 479
                self.match(LatexParser.R_BRACE_VISUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 481
                self.match(LatexParser.L_BRACE_CMD)
                self.state = 482
                self.expr()
                self.state = 483
                self.match(LatexParser.R_BRACE_CMD)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 485
                self.match(LatexParser.L_BRACKET)
                self.state = 486
                self.expr()
                self.state = 487
                self.match(LatexParser.R_BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 489
                self.match(LatexParser.L_BRACK)
                self.state = 490
                self.expr()
                self.state = 491
                self.match(LatexParser.R_BRACK)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 493
                self.match(LatexParser.L_LEFT)
                self.state = 494
                self.match(LatexParser.L_PAREN)
                self.state = 495
                self.expr()
                self.state = 496
                self.match(LatexParser.R_RIGHT)
                self.state = 497
                self.match(LatexParser.R_PAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 499
                self.match(LatexParser.L_LEFT)
                self.state = 500
                self.match(LatexParser.L_GROUP)
                self.state = 501
                self.expr()
                self.state = 502
                self.match(LatexParser.R_RIGHT)
                self.state = 503
                self.match(LatexParser.R_GROUP)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 505
                self.match(LatexParser.L_LEFT)
                self.state = 506
                self.match(LatexParser.L_BRACE)
                self.state = 507
                self.expr()
                self.state = 508
                self.match(LatexParser.R_RIGHT)
                self.state = 509
                self.match(LatexParser.R_BRACE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 511
                self.match(LatexParser.L_LEFT)
                self.state = 512
                self.match(LatexParser.L_BRACE_VISUAL)
                self.state = 513
                self.expr()
                self.state = 514
                self.match(LatexParser.R_RIGHT)
                self.state = 515
                self.match(LatexParser.R_BRACE_VISUAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 517
                self.match(LatexParser.L_LEFT)
                self.state = 518
                self.match(LatexParser.L_BRACE_CMD)
                self.state = 519
                self.expr()
                self.state = 520
                self.match(LatexParser.R_RIGHT)
                self.state = 521
                self.match(LatexParser.R_BRACE_CMD)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 523
                self.match(LatexParser.L_LEFT)
                self.state = 524
                self.match(LatexParser.L_BRACKET)
                self.state = 525
                self.expr()
                self.state = 526
                self.match(LatexParser.R_RIGHT)
                self.state = 527
                self.match(LatexParser.R_BRACKET)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 529
                self.match(LatexParser.L_LEFT)
                self.state = 530
                self.match(LatexParser.L_BRACK)
                self.state = 531
                self.expr()
                self.state = 532
                self.match(LatexParser.R_RIGHT)
                self.state = 533
                self.match(LatexParser.R_BRACK)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 535
                self.match(LatexParser.ML_LEFT)
                self.state = 536
                self.match(LatexParser.L_PAREN)
                self.state = 537
                self.expr()
                self.state = 538
                self.match(LatexParser.MR_RIGHT)
                self.state = 539
                self.match(LatexParser.R_PAREN)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 541
                self.match(LatexParser.ML_LEFT)
                self.state = 542
                self.match(LatexParser.L_GROUP)
                self.state = 543
                self.expr()
                self.state = 544
                self.match(LatexParser.MR_RIGHT)
                self.state = 545
                self.match(LatexParser.R_GROUP)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 547
                self.match(LatexParser.ML_LEFT)
                self.state = 548
                self.match(LatexParser.L_BRACE)
                self.state = 549
                self.expr()
                self.state = 550
                self.match(LatexParser.MR_RIGHT)
                self.state = 551
                self.match(LatexParser.R_BRACE)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 553
                self.match(LatexParser.ML_LEFT)
                self.state = 554
                self.match(LatexParser.L_BRACE_VISUAL)
                self.state = 555
                self.expr()
                self.state = 556
                self.match(LatexParser.MR_RIGHT)
                self.state = 557
                self.match(LatexParser.R_BRACE_VISUAL)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 559
                self.match(LatexParser.ML_LEFT)
                self.state = 560
                self.match(LatexParser.L_BRACE_CMD)
                self.state = 561
                self.expr()
                self.state = 562
                self.match(LatexParser.MR_RIGHT)
                self.state = 563
                self.match(LatexParser.R_BRACE_CMD)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 565
                self.match(LatexParser.ML_LEFT)
                self.state = 566
                self.match(LatexParser.L_BRACKET)
                self.state = 567
                self.expr()
                self.state = 568
                self.match(LatexParser.MR_RIGHT)
                self.state = 569
                self.match(LatexParser.R_BRACKET)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 571
                self.match(LatexParser.ML_LEFT)
                self.state = 572
                self.match(LatexParser.L_BRACK)
                self.state = 573
                self.expr()
                self.state = 574
                self.match(LatexParser.MR_RIGHT)
                self.state = 575
                self.match(LatexParser.R_BRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Norm_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORM(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.NORM)
            else:
                return self.getToken(LatexParser.NORM, i)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def L_LEFT(self):
            return self.getToken(LatexParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LatexParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LatexParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LatexParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_norm_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNorm_group" ):
                listener.enterNorm_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNorm_group" ):
                listener.exitNorm_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNorm_group" ):
                return visitor.visitNorm_group(self)
            else:
                return visitor.visitChildren(self)




    def norm_group(self):

        localctx = LatexParser.Norm_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_norm_group)
        try:
            self.state = 595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.match(LatexParser.NORM)
                self.state = 580
                self.expr()
                self.state = 581
                self.match(LatexParser.NORM)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.match(LatexParser.L_LEFT)
                self.state = 584
                self.match(LatexParser.NORM)
                self.state = 585
                self.expr()
                self.state = 586
                self.match(LatexParser.R_RIGHT)
                self.state = 587
                self.match(LatexParser.NORM)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 589
                self.match(LatexParser.ML_LEFT)
                self.state = 590
                self.match(LatexParser.NORM)
                self.state = 591
                self.expr()
                self.state = 592
                self.match(LatexParser.MR_RIGHT)
                self.state = 593
                self.match(LatexParser.NORM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.BAR)
            else:
                return self.getToken(LatexParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def L_VERT(self):
            return self.getToken(LatexParser.L_VERT, 0)

        def R_VERT(self):
            return self.getToken(LatexParser.R_VERT, 0)

        def VERT(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.VERT)
            else:
                return self.getToken(LatexParser.VERT, i)

        def L_LEFT(self):
            return self.getToken(LatexParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LatexParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LatexParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LatexParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_abs_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbs_group" ):
                listener.enterAbs_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbs_group" ):
                listener.exitAbs_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbs_group" ):
                return visitor.visitAbs_group(self)
            else:
                return visitor.visitChildren(self)




    def abs_group(self):

        localctx = LatexParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_abs_group)
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.match(LatexParser.BAR)
                self.state = 598
                self.expr()
                self.state = 599
                self.match(LatexParser.BAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(LatexParser.L_VERT)
                self.state = 602
                self.expr()
                self.state = 603
                self.match(LatexParser.R_VERT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                self.match(LatexParser.VERT)
                self.state = 606
                self.expr()
                self.state = 607
                self.match(LatexParser.VERT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 609
                self.match(LatexParser.L_LEFT)
                self.state = 610
                self.match(LatexParser.BAR)
                self.state = 611
                self.expr()
                self.state = 612
                self.match(LatexParser.R_RIGHT)
                self.state = 613
                self.match(LatexParser.BAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 615
                self.match(LatexParser.L_LEFT)
                self.state = 616
                self.match(LatexParser.L_VERT)
                self.state = 617
                self.expr()
                self.state = 618
                self.match(LatexParser.R_RIGHT)
                self.state = 619
                self.match(LatexParser.R_VERT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 621
                self.match(LatexParser.L_LEFT)
                self.state = 622
                self.match(LatexParser.VERT)
                self.state = 623
                self.expr()
                self.state = 624
                self.match(LatexParser.R_RIGHT)
                self.state = 625
                self.match(LatexParser.VERT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 627
                self.match(LatexParser.ML_LEFT)
                self.state = 628
                self.match(LatexParser.BAR)
                self.state = 629
                self.expr()
                self.state = 630
                self.match(LatexParser.MR_RIGHT)
                self.state = 631
                self.match(LatexParser.BAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 633
                self.match(LatexParser.ML_LEFT)
                self.state = 634
                self.match(LatexParser.L_VERT)
                self.state = 635
                self.expr()
                self.state = 636
                self.match(LatexParser.MR_RIGHT)
                self.state = 637
                self.match(LatexParser.R_VERT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 639
                self.match(LatexParser.ML_LEFT)
                self.state = 640
                self.match(LatexParser.VERT)
                self.state = 641
                self.expr()
                self.state = 642
                self.match(LatexParser.MR_RIGHT)
                self.state = 643
                self.match(LatexParser.VERT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floor_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_FLOOR(self):
            return self.getToken(LatexParser.L_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def R_FLOOR(self):
            return self.getToken(LatexParser.R_FLOOR, 0)

        def LL_CORNER(self):
            return self.getToken(LatexParser.LL_CORNER, 0)

        def LR_CORNER(self):
            return self.getToken(LatexParser.LR_CORNER, 0)

        def L_LEFT(self):
            return self.getToken(LatexParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LatexParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LatexParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LatexParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_floor_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloor_group" ):
                listener.enterFloor_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloor_group" ):
                listener.exitFloor_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloor_group" ):
                return visitor.visitFloor_group(self)
            else:
                return visitor.visitChildren(self)




    def floor_group(self):

        localctx = LatexParser.Floor_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_floor_group)
        try:
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(LatexParser.L_FLOOR)
                self.state = 648
                self.expr()
                self.state = 649
                self.match(LatexParser.R_FLOOR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.match(LatexParser.LL_CORNER)
                self.state = 652
                self.expr()
                self.state = 653
                self.match(LatexParser.LR_CORNER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 655
                self.match(LatexParser.L_LEFT)
                self.state = 656
                self.match(LatexParser.L_FLOOR)
                self.state = 657
                self.expr()
                self.state = 658
                self.match(LatexParser.R_RIGHT)
                self.state = 659
                self.match(LatexParser.R_FLOOR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 661
                self.match(LatexParser.L_LEFT)
                self.state = 662
                self.match(LatexParser.LL_CORNER)
                self.state = 663
                self.expr()
                self.state = 664
                self.match(LatexParser.R_RIGHT)
                self.state = 665
                self.match(LatexParser.LR_CORNER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 667
                self.match(LatexParser.ML_LEFT)
                self.state = 668
                self.match(LatexParser.L_FLOOR)
                self.state = 669
                self.expr()
                self.state = 670
                self.match(LatexParser.MR_RIGHT)
                self.state = 671
                self.match(LatexParser.R_FLOOR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 673
                self.match(LatexParser.ML_LEFT)
                self.state = 674
                self.match(LatexParser.LL_CORNER)
                self.state = 675
                self.expr()
                self.state = 676
                self.match(LatexParser.MR_RIGHT)
                self.state = 677
                self.match(LatexParser.LR_CORNER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ceil_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CEIL(self):
            return self.getToken(LatexParser.L_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def R_CEIL(self):
            return self.getToken(LatexParser.R_CEIL, 0)

        def UL_CORNER(self):
            return self.getToken(LatexParser.UL_CORNER, 0)

        def UR_CORNER(self):
            return self.getToken(LatexParser.UR_CORNER, 0)

        def L_LEFT(self):
            return self.getToken(LatexParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LatexParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LatexParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LatexParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_ceil_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCeil_group" ):
                listener.enterCeil_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCeil_group" ):
                listener.exitCeil_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCeil_group" ):
                return visitor.visitCeil_group(self)
            else:
                return visitor.visitChildren(self)




    def ceil_group(self):

        localctx = LatexParser.Ceil_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_ceil_group)
        try:
            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.match(LatexParser.L_CEIL)
                self.state = 682
                self.expr()
                self.state = 683
                self.match(LatexParser.R_CEIL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.match(LatexParser.UL_CORNER)
                self.state = 686
                self.expr()
                self.state = 687
                self.match(LatexParser.UR_CORNER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 689
                self.match(LatexParser.L_LEFT)
                self.state = 690
                self.match(LatexParser.L_CEIL)
                self.state = 691
                self.expr()
                self.state = 692
                self.match(LatexParser.R_RIGHT)
                self.state = 693
                self.match(LatexParser.R_CEIL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 695
                self.match(LatexParser.L_LEFT)
                self.state = 696
                self.match(LatexParser.UL_CORNER)
                self.state = 697
                self.expr()
                self.state = 698
                self.match(LatexParser.R_RIGHT)
                self.state = 699
                self.match(LatexParser.UR_CORNER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 701
                self.match(LatexParser.ML_LEFT)
                self.state = 702
                self.match(LatexParser.L_CEIL)
                self.state = 703
                self.expr()
                self.state = 704
                self.match(LatexParser.MR_RIGHT)
                self.state = 705
                self.match(LatexParser.R_CEIL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 707
                self.match(LatexParser.ML_LEFT)
                self.state = 708
                self.match(LatexParser.UL_CORNER)
                self.state = 709
                self.expr()
                self.state = 710
                self.match(LatexParser.MR_RIGHT)
                self.state = 711
                self.match(LatexParser.UR_CORNER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.base = None # ExprContext

        def ACCENT_SYMBOL(self):
            return self.getToken(LatexParser.ACCENT_SYMBOL, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_accent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccent" ):
                listener.enterAccent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccent" ):
                listener.exitAccent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccent" ):
                return visitor.visitAccent(self)
            else:
                return visitor.visitChildren(self)




    def accent(self):

        localctx = LatexParser.AccentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_accent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(LatexParser.ACCENT_SYMBOL)
            self.state = 716
            self.match(LatexParser.L_BRACE)
            self.state = 717
            localctx.base = self.expr()
            self.state = 718
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_expr_no_supexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(LatexParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(LatexParser.GREEK_CMD, 0)

        def accent(self):
            return self.getTypedRuleContext(LatexParser.AccentContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(LatexParser.SubexprContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_atom_expr_no_supexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr_no_supexpr" ):
                listener.enterAtom_expr_no_supexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr_no_supexpr" ):
                listener.exitAtom_expr_no_supexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr_no_supexpr" ):
                return visitor.visitAtom_expr_no_supexpr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr_no_supexpr(self):

        localctx = LatexParser.Atom_expr_no_supexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_atom_expr_no_supexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.state = 720
                self.match(LatexParser.LETTER_NO_E)
                pass
            elif token in [166]:
                self.state = 721
                self.match(LatexParser.GREEK_CMD)
                pass
            elif token in [167]:
                self.state = 722
                self.accent()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 725
                self.subexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LatexParser.RULE_atom_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AtomExprContext(Atom_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LatexParser.Atom_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LETTER_NO_E(self):
            return self.getToken(LatexParser.LETTER_NO_E, 0)
        def GREEK_CMD(self):
            return self.getToken(LatexParser.GREEK_CMD, 0)
        def accent(self):
            return self.getTypedRuleContext(LatexParser.AccentContext,0)

        def supexpr(self):
            return self.getTypedRuleContext(LatexParser.SupexprContext,0)

        def subexpr(self):
            return self.getTypedRuleContext(LatexParser.SubexprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)



    def atom_expr(self):

        localctx = LatexParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_atom_expr)
        try:
            localctx = LatexParser.AtomExprContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.state = 728
                self.match(LatexParser.LETTER_NO_E)
                pass
            elif token in [166]:
                self.state = 729
                self.match(LatexParser.GREEK_CMD)
                pass
            elif token in [167]:
                self.state = 730
                self.accent()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 733
                self.supexpr()
                self.state = 734
                self.subexpr()

            elif la_ == 2:
                self.state = 736
                self.subexpr()
                self.state = 737
                self.supexpr()

            elif la_ == 3:
                self.state = 739
                self.subexpr()

            elif la_ == 4:
                self.state = 740
                self.supexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(LatexParser.Atom_exprContext,0)


        def SYMBOL(self):
            return self.getToken(LatexParser.SYMBOL, 0)

        def NUMBER(self):
            return self.getToken(LatexParser.NUMBER, 0)

        def PERCENT_NUMBER(self):
            return self.getToken(LatexParser.PERCENT_NUMBER, 0)

        def E_NOTATION(self):
            return self.getToken(LatexParser.E_NOTATION, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LatexParser.DIFFERENTIAL, 0)

        def mathit(self):
            return self.getTypedRuleContext(LatexParser.MathitContext,0)


        def VARIABLE(self):
            return self.getToken(LatexParser.VARIABLE, 0)

        def text(self):
            return self.getTypedRuleContext(LatexParser.TextContext,0)


        def triangle(self):
            return self.getTypedRuleContext(LatexParser.TriangleContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = LatexParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_atom)
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145, 166, 167]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.atom_expr()
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.match(LatexParser.SYMBOL)
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 3)
                self.state = 745
                self.match(LatexParser.NUMBER)
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 4)
                self.state = 746
                self.match(LatexParser.PERCENT_NUMBER)
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 5)
                self.state = 747
                self.match(LatexParser.E_NOTATION)
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 6)
                self.state = 748
                self.match(LatexParser.DIFFERENTIAL)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 7)
                self.state = 749
                self.mathit()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 8)
                self.state = 750
                self.match(LatexParser.VARIABLE)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 9)
                self.state = 751
                self.text()
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 10)
                self.state = 752
                self.triangle()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATHIT(self):
            return self.getToken(LatexParser.CMD_MATHIT, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def mathit_text(self):
            return self.getTypedRuleContext(LatexParser.Mathit_textContext,0)


        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_mathit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathit" ):
                listener.enterMathit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathit" ):
                listener.exitMathit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathit" ):
                return visitor.visitMathit(self)
            else:
                return visitor.visitChildren(self)




    def mathit(self):

        localctx = LatexParser.MathitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_mathit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(LatexParser.CMD_MATHIT)
            self.state = 756
            self.match(LatexParser.L_BRACE)
            self.state = 757
            self.mathit_text()
            self.state = 758
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mathit_textContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.LETTER_NO_E)
            else:
                return self.getToken(LatexParser.LETTER_NO_E, i)

        def E_NOTATION_E(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.E_NOTATION_E)
            else:
                return self.getToken(LatexParser.E_NOTATION_E, i)

        def EXP_E(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.EXP_E)
            else:
                return self.getToken(LatexParser.EXP_E, i)

        def getRuleIndex(self):
            return LatexParser.RULE_mathit_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathit_text" ):
                listener.enterMathit_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathit_text" ):
                listener.exitMathit_text(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathit_text" ):
                return visitor.visitMathit_text(self)
            else:
                return visitor.visitChildren(self)




    def mathit_text(self):

        localctx = LatexParser.Mathit_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_mathit_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 760
                _la = self._input.LA(1)
                if not(((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 763 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 7) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_TEXT(self):
            return self.getToken(LatexParser.CMD_TEXT, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def TEXT_LETTER(self):
            return self.getToken(LatexParser.TEXT_LETTER, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterText" ):
                listener.enterText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitText" ):
                listener.exitText(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitText" ):
                return visitor.visitText(self)
            else:
                return visitor.visitChildren(self)




    def text(self):

        localctx = LatexParser.TextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(LatexParser.CMD_TEXT)
            self.state = 766
            self.match(LatexParser.L_BRACE)
            self.state = 767
            self.match(LatexParser.TEXT_LETTER)
            self.state = 768
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FracContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def CMD_FRAC(self):
            return self.getToken(LatexParser.CMD_FRAC, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.L_BRACE)
            else:
                return self.getToken(LatexParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.R_BRACE)
            else:
                return self.getToken(LatexParser.R_BRACE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.ExprContext)
            else:
                return self.getTypedRuleContext(LatexParser.ExprContext,i)


        def getRuleIndex(self):
            return LatexParser.RULE_frac

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrac" ):
                listener.enterFrac(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrac" ):
                listener.exitFrac(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrac" ):
                return visitor.visitFrac(self)
            else:
                return visitor.visitChildren(self)




    def frac(self):

        localctx = LatexParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(LatexParser.CMD_FRAC)
            self.state = 771
            self.match(LatexParser.L_BRACE)
            self.state = 772
            localctx.upper = self.expr()
            self.state = 773
            self.match(LatexParser.R_BRACE)
            self.state = 774
            self.match(LatexParser.L_BRACE)
            self.state = 775
            localctx.lower = self.expr()
            self.state = 776
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.L_BRACE)
            else:
                return self.getToken(LatexParser.L_BRACE, i)

        def CMD_CHOOSE(self):
            return self.getToken(LatexParser.CMD_CHOOSE, 0)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.R_BRACE)
            else:
                return self.getToken(LatexParser.R_BRACE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.ExprContext)
            else:
                return self.getTypedRuleContext(LatexParser.ExprContext,i)


        def CMD_BINOM(self):
            return self.getToken(LatexParser.CMD_BINOM, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_binom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinom" ):
                listener.enterBinom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinom" ):
                listener.exitBinom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinom" ):
                return visitor.visitBinom(self)
            else:
                return visitor.visitChildren(self)




    def binom(self):

        localctx = LatexParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_binom)
        try:
            self.state = 792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(LatexParser.L_BRACE)
                self.state = 779
                localctx.upper = self.expr()
                self.state = 780
                self.match(LatexParser.CMD_CHOOSE)
                self.state = 781
                localctx.lower = self.expr()
                self.state = 782
                self.match(LatexParser.R_BRACE)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.match(LatexParser.CMD_BINOM)
                self.state = 785
                self.match(LatexParser.L_BRACE)
                self.state = 786
                localctx.upper = self.expr()
                self.state = 787
                self.match(LatexParser.R_BRACE)
                self.state = 788
                self.match(LatexParser.L_BRACE)
                self.state = 789
                localctx.lower = self.expr()
                self.state = 790
                self.match(LatexParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_functions_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_LOG(self):
            return self.getToken(LatexParser.FUNC_LOG, 0)

        def FUNC_LN(self):
            return self.getToken(LatexParser.FUNC_LN, 0)

        def FUNC_EXP(self):
            return self.getToken(LatexParser.FUNC_EXP, 0)

        def FUNC_SIN(self):
            return self.getToken(LatexParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(LatexParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(LatexParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(LatexParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(LatexParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(LatexParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(LatexParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(LatexParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(LatexParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(LatexParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(LatexParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(LatexParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(LatexParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(LatexParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(LatexParser.FUNC_TANH, 0)

        def FUNC_ARSINH(self):
            return self.getToken(LatexParser.FUNC_ARSINH, 0)

        def FUNC_ARCOSH(self):
            return self.getToken(LatexParser.FUNC_ARCOSH, 0)

        def FUNC_ARTANH(self):
            return self.getToken(LatexParser.FUNC_ARTANH, 0)

        def FUNC_ARCSINH(self):
            return self.getToken(LatexParser.FUNC_ARCSINH, 0)

        def FUNC_ARCCOSH(self):
            return self.getToken(LatexParser.FUNC_ARCCOSH, 0)

        def FUNC_ARCTANH(self):
            return self.getToken(LatexParser.FUNC_ARCTANH, 0)

        def FUNC_FLOOR(self):
            return self.getToken(LatexParser.FUNC_FLOOR, 0)

        def FUNC_CEIL(self):
            return self.getToken(LatexParser.FUNC_CEIL, 0)

        def FUNC_DET(self):
            return self.getToken(LatexParser.FUNC_DET, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_func_normal_functions_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_functions_single_arg" ):
                listener.enterFunc_normal_functions_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_functions_single_arg" ):
                listener.exitFunc_normal_functions_single_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_normal_functions_single_arg" ):
                return visitor.visitFunc_normal_functions_single_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_normal_functions_single_arg(self):

        localctx = LatexParser.Func_normal_functions_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_func_normal_functions_single_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            _la = self._input.LA(1)
            if not(((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 2611356893183) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_functions_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD(self):
            return self.getToken(LatexParser.FUNC_GCD, 0)

        def FUNC_LCM(self):
            return self.getToken(LatexParser.FUNC_LCM, 0)

        def FUNC_MAX(self):
            return self.getToken(LatexParser.FUNC_MAX, 0)

        def FUNC_MIN(self):
            return self.getToken(LatexParser.FUNC_MIN, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_func_normal_functions_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_functions_multi_arg" ):
                listener.enterFunc_normal_functions_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_functions_multi_arg" ):
                listener.exitFunc_normal_functions_multi_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_normal_functions_multi_arg" ):
                return visitor.visitFunc_normal_functions_multi_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_normal_functions_multi_arg(self):

        localctx = LatexParser.Func_normal_functions_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_func_normal_functions_multi_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 51) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_operator_names_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_ARSINH_NAME(self):
            return self.getToken(LatexParser.FUNC_ARSINH_NAME, 0)

        def FUNC_ARCOSH_NAME(self):
            return self.getToken(LatexParser.FUNC_ARCOSH_NAME, 0)

        def FUNC_ARTANH_NAME(self):
            return self.getToken(LatexParser.FUNC_ARTANH_NAME, 0)

        def FUNC_ARCSINH_NAME(self):
            return self.getToken(LatexParser.FUNC_ARCSINH_NAME, 0)

        def FUNC_ARCCOSH_NAME(self):
            return self.getToken(LatexParser.FUNC_ARCCOSH_NAME, 0)

        def FUNC_ARCTANH_NAME(self):
            return self.getToken(LatexParser.FUNC_ARCTANH_NAME, 0)

        def FUNC_FLOOR_NAME(self):
            return self.getToken(LatexParser.FUNC_FLOOR_NAME, 0)

        def FUNC_CEIL_NAME(self):
            return self.getToken(LatexParser.FUNC_CEIL_NAME, 0)

        def FUNC_EYE_NAME(self):
            return self.getToken(LatexParser.FUNC_EYE_NAME, 0)

        def FUNC_RANK_NAME(self):
            return self.getToken(LatexParser.FUNC_RANK_NAME, 0)

        def FUNC_TRACE_NAME(self):
            return self.getToken(LatexParser.FUNC_TRACE_NAME, 0)

        def FUNC_RREF_NAME(self):
            return self.getToken(LatexParser.FUNC_RREF_NAME, 0)

        def FUNC_NULLSPACE_NAME(self):
            return self.getToken(LatexParser.FUNC_NULLSPACE_NAME, 0)

        def FUNC_DIAGONALIZE_NAME(self):
            return self.getToken(LatexParser.FUNC_DIAGONALIZE_NAME, 0)

        def FUNC_NORM_NAME(self):
            return self.getToken(LatexParser.FUNC_NORM_NAME, 0)

        def FUNC_EIGENVALS_NAME(self):
            return self.getToken(LatexParser.FUNC_EIGENVALS_NAME, 0)

        def FUNC_EIGENVECTORS_NAME(self):
            return self.getToken(LatexParser.FUNC_EIGENVECTORS_NAME, 0)

        def FUNC_SVD_NAME(self):
            return self.getToken(LatexParser.FUNC_SVD_NAME, 0)

        def FUNC_COLS_NAME(self):
            return self.getToken(LatexParser.FUNC_COLS_NAME, 0)

        def FUNC_ROWS_NAME(self):
            return self.getToken(LatexParser.FUNC_ROWS_NAME, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_func_operator_names_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_operator_names_single_arg" ):
                listener.enterFunc_operator_names_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_operator_names_single_arg" ):
                listener.exitFunc_operator_names_single_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_operator_names_single_arg" ):
                return visitor.visitFunc_operator_names_single_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_operator_names_single_arg(self):

        localctx = LatexParser.Func_operator_names_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_func_operator_names_single_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 66830205759) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_operator_names_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD_NAME(self):
            return self.getToken(LatexParser.FUNC_GCD_NAME, 0)

        def FUNC_LCM_NAME(self):
            return self.getToken(LatexParser.FUNC_LCM_NAME, 0)

        def FUNC_ZEROS_NAME(self):
            return self.getToken(LatexParser.FUNC_ZEROS_NAME, 0)

        def FUNC_ORTHOGONALIZE_NAME(self):
            return self.getToken(LatexParser.FUNC_ORTHOGONALIZE_NAME, 0)

        def FUNC_ONES_NAME(self):
            return self.getToken(LatexParser.FUNC_ONES_NAME, 0)

        def FUNC_DIAG_NAME(self):
            return self.getToken(LatexParser.FUNC_DIAG_NAME, 0)

        def FUNC_HSTACK_NAME(self):
            return self.getToken(LatexParser.FUNC_HSTACK_NAME, 0)

        def FUNC_VSTACK_NAME(self):
            return self.getToken(LatexParser.FUNC_VSTACK_NAME, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_func_operator_names_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_operator_names_multi_arg" ):
                listener.enterFunc_operator_names_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_operator_names_multi_arg" ):
                listener.exitFunc_operator_names_multi_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_operator_names_multi_arg" ):
                return visitor.visitFunc_operator_names_multi_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_operator_names_multi_arg(self):

        localctx = LatexParser.Func_operator_names_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_func_operator_names_multi_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 29515779) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None # Func_operator_names_single_argContext

        def func_normal_functions_single_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_normal_functions_single_argContext,0)


        def CMD_OPERATORNAME(self):
            return self.getToken(LatexParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def func_operator_names_single_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_operator_names_single_argContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_func_normal_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_single_arg" ):
                listener.enterFunc_normal_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_single_arg" ):
                listener.exitFunc_normal_single_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_normal_single_arg" ):
                return visitor.visitFunc_normal_single_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_normal_single_arg(self):

        localctx = LatexParser.Func_normal_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_func_normal_single_arg)
        try:
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 86, 87, 90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.func_normal_functions_single_arg()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(LatexParser.CMD_OPERATORNAME)
                self.state = 804
                self.match(LatexParser.L_BRACE)
                self.state = 805
                localctx.func_operator_name = self.func_operator_names_single_arg()
                self.state = 806
                self.match(LatexParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None # Func_operator_names_multi_argContext

        def func_normal_functions_multi_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_normal_functions_multi_argContext,0)


        def CMD_OPERATORNAME(self):
            return self.getToken(LatexParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def func_operator_names_multi_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_operator_names_multi_argContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_func_normal_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_multi_arg" ):
                listener.enterFunc_normal_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_multi_arg" ):
                listener.exitFunc_normal_multi_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_normal_multi_arg" ):
                return visitor.visitFunc_normal_multi_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_normal_multi_arg(self):

        localctx = LatexParser.Func_normal_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_func_normal_multi_arg)
        try:
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84, 85, 88, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.func_normal_functions_multi_arg()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.match(LatexParser.CMD_OPERATORNAME)
                self.state = 812
                self.match(LatexParser.L_BRACE)
                self.state = 813
                localctx.func_operator_name = self.func_operator_names_multi_arg()
                self.state = 814
                self.match(LatexParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None # ExprContext
            self.base = None # ExprContext

        def func_normal_single_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_normal_single_argContext,0)


        def L_PAREN(self):
            return self.getToken(LatexParser.L_PAREN, 0)

        def func_single_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_single_argContext,0)


        def R_PAREN(self):
            return self.getToken(LatexParser.R_PAREN, 0)

        def func_single_arg_noparens(self):
            return self.getTypedRuleContext(LatexParser.Func_single_arg_noparensContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(LatexParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LatexParser.SupexprContext,0)


        def L_LEFT(self):
            return self.getToken(LatexParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LatexParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LatexParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LatexParser.MR_RIGHT, 0)

        def func_normal_multi_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_normal_multi_argContext,0)


        def func_multi_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_multi_argContext,0)


        def func_multi_arg_noparens(self):
            return self.getTypedRuleContext(LatexParser.Func_multi_arg_noparensContext,0)


        def atom_expr_no_supexpr(self):
            return self.getTypedRuleContext(LatexParser.Atom_expr_no_supexprContext,0)


        def func_common_args(self):
            return self.getTypedRuleContext(LatexParser.Func_common_argsContext,0)


        def L_BRACKET(self):
            return self.getToken(LatexParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LatexParser.R_BRACKET, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.L_BRACE)
            else:
                return self.getToken(LatexParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.R_BRACE)
            else:
                return self.getToken(LatexParser.R_BRACE, i)

        def FUNC_INT(self):
            return self.getToken(LatexParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LatexParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(LatexParser.FracContext,0)


        def additive(self):
            return self.getTypedRuleContext(LatexParser.AdditiveContext,0)


        def UNDERSCORE(self):
            return self.getToken(LatexParser.UNDERSCORE, 0)

        def CARET(self):
            return self.getToken(LatexParser.CARET, 0)

        def FUNC_SQRT(self):
            return self.getToken(LatexParser.FUNC_SQRT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LatexParser.ExprContext)
            else:
                return self.getTypedRuleContext(LatexParser.ExprContext,i)


        def mp(self):
            return self.getTypedRuleContext(LatexParser.MpContext,0)


        def FUNC_SUM(self):
            return self.getToken(LatexParser.FUNC_SUM, 0)

        def FUNC_PROD(self):
            return self.getToken(LatexParser.FUNC_PROD, 0)

        def subeq(self):
            return self.getTypedRuleContext(LatexParser.SubeqContext,0)


        def FUNC_LIM(self):
            return self.getToken(LatexParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(LatexParser.Limit_subContext,0)


        def EXP_E(self):
            return self.getToken(LatexParser.EXP_E, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc" ):
                listener.enterFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc" ):
                listener.exitFunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc" ):
                return visitor.visitFunc(self)
            else:
                return visitor.visitChildren(self)




    def func(self):

        localctx = LatexParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.func_normal_single_arg()
                self.state = 831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 819
                        self.subexpr()


                    self.state = 823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 822
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 825
                        self.supexpr()


                    self.state = 829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 828
                        self.subexpr()


                    pass


                self.state = 854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==40:
                        self.state = 833
                        self.match(LatexParser.L_LEFT)


                    self.state = 836
                    self.match(LatexParser.L_PAREN)
                    self.state = 837
                    self.func_single_arg()
                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==41:
                        self.state = 838
                        self.match(LatexParser.R_RIGHT)


                    self.state = 841
                    self.match(LatexParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 843
                        self.match(LatexParser.ML_LEFT)


                    self.state = 846
                    self.match(LatexParser.L_PAREN)
                    self.state = 847
                    self.func_single_arg()
                    self.state = 849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==43:
                        self.state = 848
                        self.match(LatexParser.MR_RIGHT)


                    self.state = 851
                    self.match(LatexParser.R_PAREN)
                    pass

                elif la_ == 3:
                    self.state = 853
                    self.func_single_arg_noparens()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.func_normal_multi_arg()
                self.state = 869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 857
                        self.subexpr()


                    self.state = 861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 860
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 863
                        self.supexpr()


                    self.state = 867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 866
                        self.subexpr()


                    pass


                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==40:
                        self.state = 871
                        self.match(LatexParser.L_LEFT)


                    self.state = 874
                    self.match(LatexParser.L_PAREN)
                    self.state = 875
                    self.func_multi_arg()
                    self.state = 877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==41:
                        self.state = 876
                        self.match(LatexParser.R_RIGHT)


                    self.state = 879
                    self.match(LatexParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 881
                        self.match(LatexParser.ML_LEFT)


                    self.state = 884
                    self.match(LatexParser.L_PAREN)
                    self.state = 885
                    self.func_multi_arg()
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==43:
                        self.state = 886
                        self.match(LatexParser.MR_RIGHT)


                    self.state = 889
                    self.match(LatexParser.R_PAREN)
                    pass

                elif la_ == 3:
                    self.state = 891
                    self.func_multi_arg_noparens()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                self.atom_expr_no_supexpr()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 895
                    self.supexpr()


                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 898
                    self.match(LatexParser.L_LEFT)


                self.state = 901
                _la = self._input.LA(1)
                if not(_la==13 or _la==23):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 902
                self.func_common_args()
                self.state = 903
                _la = self._input.LA(1)
                if not(_la==14 or _la==24):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 904
                    self.match(LatexParser.R_RIGHT)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 907
                self.atom_expr_no_supexpr()
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 908
                    self.supexpr()


                self.state = 911
                self.match(LatexParser.L_BRACE)
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 912
                    self.match(LatexParser.L_LEFT)


                self.state = 915
                _la = self._input.LA(1)
                if not(_la==13 or _la==23):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 916
                self.func_common_args()
                self.state = 917
                _la = self._input.LA(1)
                if not(_la==14 or _la==24):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 918
                    self.match(LatexParser.R_RIGHT)


                self.state = 921
                self.match(LatexParser.R_BRACE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 923
                self.match(LatexParser.FUNC_INT)
                self.state = 944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.subexpr()
                    self.state = 925
                    self.supexpr()

                elif la_ == 2:
                    self.state = 927
                    self.supexpr()
                    self.state = 928
                    self.subexpr()

                elif la_ == 3:
                    self.state = 930
                    self.match(LatexParser.UNDERSCORE)
                    self.state = 931
                    self.match(LatexParser.L_BRACE)
                    self.state = 932
                    self.match(LatexParser.R_BRACE)

                    self.state = 934
                    self.match(LatexParser.CARET)
                    self.state = 935
                    self.match(LatexParser.L_BRACE)
                    self.state = 936
                    self.match(LatexParser.R_BRACE)

                elif la_ == 4:
                    self.state = 937
                    self.match(LatexParser.CARET)
                    self.state = 938
                    self.match(LatexParser.L_BRACE)
                    self.state = 939
                    self.match(LatexParser.R_BRACE)

                    self.state = 941
                    self.match(LatexParser.UNDERSCORE)
                    self.state = 942
                    self.match(LatexParser.L_BRACE)
                    self.state = 943
                    self.match(LatexParser.R_BRACE)


                self.state = 952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 947
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        self.state = 946
                        self.additive(0)


                    self.state = 949
                    self.match(LatexParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 950
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 951
                    self.additive(0)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 954
                self.match(LatexParser.FUNC_SQRT)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 955
                    self.match(LatexParser.L_BRACKET)
                    self.state = 956
                    localctx.root = self.expr()
                    self.state = 957
                    self.match(LatexParser.R_BRACKET)


                self.state = 961
                self.match(LatexParser.L_BRACE)
                self.state = 962
                localctx.base = self.expr()
                self.state = 963
                self.match(LatexParser.R_BRACE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 965
                _la = self._input.LA(1)
                if not(_la==47 or _la==48):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 972
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [136]:
                    self.state = 966
                    self.subeq()
                    self.state = 967
                    self.supexpr()
                    pass
                elif token in [137]:
                    self.state = 969
                    self.supexpr()
                    self.state = 970
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 974
                self.mp(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 976
                self.match(LatexParser.FUNC_LIM)
                self.state = 977
                self.limit_sub()
                self.state = 978
                self.mp(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 980
                self.match(LatexParser.EXP_E)
                self.state = 982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 981
                    self.supexpr()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(LatexParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(LatexParser.ArgsContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = LatexParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_args)
        try:
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.expr()
                self.state = 987
                self.match(LatexParser.COMMA)
                self.state = 988
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_common_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(LatexParser.AtomContext,0)


        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(LatexParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(LatexParser.ArgsContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_func_common_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_common_args" ):
                listener.enterFunc_common_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_common_args" ):
                listener.exitFunc_common_args(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_common_args" ):
                return visitor.visitFunc_common_args(self)
            else:
                return visitor.visitChildren(self)




    def func_common_args(self):

        localctx = LatexParser.Func_common_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_func_common_args)
        try:
            self.state = 1001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.atom()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.expr()
                self.state = 995
                self.match(LatexParser.COMMA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 997
                self.expr()
                self.state = 998
                self.match(LatexParser.COMMA)
                self.state = 999
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LatexParser.UNDERSCORE, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.L_BRACE)
            else:
                return self.getToken(LatexParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(LatexParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LatexParser.R_BRACE)
            else:
                return self.getToken(LatexParser.R_BRACE, i)

        def LETTER_NO_E(self):
            return self.getToken(LatexParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(LatexParser.GREEK_CMD, 0)

        def CARET(self):
            return self.getToken(LatexParser.CARET, 0)

        def ADD(self):
            return self.getToken(LatexParser.ADD, 0)

        def SUB(self):
            return self.getToken(LatexParser.SUB, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_limit_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_sub" ):
                listener.enterLimit_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_sub" ):
                listener.exitLimit_sub(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_sub" ):
                return visitor.visitLimit_sub(self)
            else:
                return visitor.visitChildren(self)




    def limit_sub(self):

        localctx = LatexParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_limit_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(LatexParser.UNDERSCORE)
            self.state = 1004
            self.match(LatexParser.L_BRACE)
            self.state = 1005
            _la = self._input.LA(1)
            if not(_la==145 or _la==166):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1006
            self.match(LatexParser.LIM_APPROACH_SYM)
            self.state = 1007
            self.expr()
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1008
                self.match(LatexParser.CARET)
                self.state = 1009
                self.match(LatexParser.L_BRACE)
                self.state = 1010
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1011
                self.match(LatexParser.R_BRACE)


            self.state = 1014
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_func_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_single_arg" ):
                listener.enterFunc_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_single_arg" ):
                listener.exitFunc_single_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_single_arg" ):
                return visitor.visitFunc_single_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_single_arg(self):

        localctx = LatexParser.Func_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_func_single_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_single_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(LatexParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_func_single_arg_noparens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_single_arg_noparens" ):
                listener.enterFunc_single_arg_noparens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_single_arg_noparens" ):
                listener.exitFunc_single_arg_noparens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_single_arg_noparens" ):
                return visitor.visitFunc_single_arg_noparens(self)
            else:
                return visitor.visitChildren(self)




    def func_single_arg_noparens(self):

        localctx = LatexParser.Func_single_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_func_single_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(LatexParser.COMMA, 0)

        def func_multi_arg(self):
            return self.getTypedRuleContext(LatexParser.Func_multi_argContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_func_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_multi_arg" ):
                listener.enterFunc_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_multi_arg" ):
                listener.exitFunc_multi_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_multi_arg" ):
                return visitor.visitFunc_multi_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_multi_arg(self):

        localctx = LatexParser.Func_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_func_multi_arg)
        try:
            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.expr()
                self.state = 1022
                self.match(LatexParser.COMMA)
                self.state = 1023
                self.func_multi_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_multi_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(LatexParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_func_multi_arg_noparens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_multi_arg_noparens" ):
                listener.enterFunc_multi_arg_noparens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_multi_arg_noparens" ):
                listener.exitFunc_multi_arg_noparens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_multi_arg_noparens" ):
                return visitor.visitFunc_multi_arg_noparens(self)
            else:
                return visitor.visitChildren(self)




    def func_multi_arg_noparens(self):

        localctx = LatexParser.Func_multi_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_func_multi_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LatexParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(LatexParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def args(self):
            return self.getTypedRuleContext(LatexParser.ArgsContext,0)


        def getRuleIndex(self):
            return LatexParser.RULE_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubexpr" ):
                listener.enterSubexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubexpr" ):
                listener.exitSubexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubexpr" ):
                return visitor.visitSubexpr(self)
            else:
                return visitor.visitChildren(self)




    def subexpr(self):

        localctx = LatexParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(LatexParser.UNDERSCORE)
            self.state = 1038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109, 119, 120, 142, 145, 150, 151, 162, 163, 164, 166, 167]:
                self.state = 1030
                self.atom()
                pass
            elif token in [17]:
                self.state = 1031
                self.match(LatexParser.L_BRACE)
                self.state = 1034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 1032
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 1033
                    self.args()
                    pass


                self.state = 1036
                self.match(LatexParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LatexParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LatexParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LatexParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_supexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupexpr" ):
                listener.enterSupexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupexpr" ):
                listener.exitSupexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupexpr" ):
                return visitor.visitSupexpr(self)
            else:
                return visitor.visitChildren(self)




    def supexpr(self):

        localctx = LatexParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(LatexParser.CARET)
            self.state = 1046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109, 119, 120, 142, 145, 150, 151, 162, 163, 164, 166, 167]:
                self.state = 1041
                self.atom()
                pass
            elif token in [17]:
                self.state = 1042
                self.match(LatexParser.L_BRACE)
                self.state = 1043
                self.expr()
                self.state = 1044
                self.match(LatexParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LatexParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LatexParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_subeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubeq" ):
                listener.enterSubeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubeq" ):
                listener.exitSubeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubeq" ):
                return visitor.visitSubeq(self)
            else:
                return visitor.visitChildren(self)




    def subeq(self):

        localctx = LatexParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(LatexParser.UNDERSCORE)
            self.state = 1049
            self.match(LatexParser.L_BRACE)
            self.state = 1050
            self.equality()
            self.state = 1051
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LatexParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LatexParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LatexParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(LatexParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LatexParser.RULE_supeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupeq" ):
                listener.enterSupeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupeq" ):
                listener.exitSupeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupeq" ):
                return visitor.visitSupeq(self)
            else:
                return visitor.visitChildren(self)




    def supeq(self):

        localctx = LatexParser.SupeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_supeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(LatexParser.UNDERSCORE)
            self.state = 1054
            self.match(LatexParser.L_BRACE)
            self.state = 1055
            self.equality()
            self.state = 1056
            self.match(LatexParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.relation_sempred
        self._predicates[17] = self.additive_sempred
        self._predicates[18] = self.mp_sempred
        self._predicates[19] = self.mp_nofunc_sempred
        self._predicates[28] = self.exp_sempred
        self._predicates[29] = self.exp_nofunc_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def mp_sempred(self, localctx:MpContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def exp_sempred(self, localctx:ExpContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         




